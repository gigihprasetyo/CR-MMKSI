// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Configuration
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string ExceptionManagerInvalidSectionName
		{
			get { return Keys.GetString( Keys.ExceptionManagerInvalidSectionName ); }
		}
		public static string ExceptionConfigFileNotLoaded
		{
			get { return Keys.GetString( Keys.ExceptionConfigFileNotLoaded ); }
		}
		public static string ExceptionUnrecognizedElement
		{
			get { return Keys.GetString( Keys.ExceptionUnrecognizedElement ); }
		}
		public static string ExceptionConfigReserved
		{
			get { return Keys.GetString( Keys.ExceptionConfigReserved ); }
		}
		public static string ExceptionLocationReserved
		{
			get { return Keys.GetString( Keys.ExceptionLocationReserved ); }
		}
		public static string ExceptionOnlyOneConfigSections
		{
			get { return Keys.GetString( Keys.ExceptionOnlyOneConfigSections ); }
		}
		public static string ExceptionMustBeXmlNode
		{
			get { return Keys.GetString( Keys.ExceptionMustBeXmlNode ); }
		}
		public static string ExceptionNotInSerializedObj
		{
			get { return Keys.GetString( Keys.ExceptionNotInSerializedObj ); }
		}
		public static string ExceptionSerializationTypeMissing
		{
			get { return Keys.GetString( Keys.ExceptionSerializationTypeMissing ); }
		}
		public static string ExceptionSerializedObjectMissing
		{
			get { return Keys.GetString( Keys.ExceptionSerializedObjectMissing ); }
		}
		public static string ExceptionItemAlreadyAdded
		{
			get { return Keys.GetString( Keys.ExceptionItemAlreadyAdded ); }
		}
		public static string ExceptionKeyNotString
		{
			get { return Keys.GetString( Keys.ExceptionKeyNotString ); }
		}
		public static string ExceptionUnregoconizedConfigSection (string name)
		{
			return Keys.GetString( Keys.ExceptionUnregoconizedConfigSection, name );
		}
		public static string ExceptionSectionGroupIsDefined (string name)
		{
			return Keys.GetString( Keys.ExceptionSectionGroupIsDefined, name );
		}
		public static string ExceptionUnrecognizedAttribute (string attribute)
		{
			return Keys.GetString( Keys.ExceptionUnrecognizedAttribute, attribute );
		}
		public static string ExceptionNoRootConfigTag (string configFile)
		{
			return Keys.GetString( Keys.ExceptionNoRootConfigTag, configFile );
		}
		public static string ExceptionCouldNotCreateType (string typeName)
		{
			return Keys.GetString( Keys.ExceptionCouldNotCreateType, typeName );
		}
		public static string ExceptionNotICSH (string typeName)
		{
			return Keys.GetString( Keys.ExceptionNotICSH, typeName );
		}
		public static string ExceptionHandlerNotWritable (string sectionName)
		{
			return Keys.GetString( Keys.ExceptionHandlerNotWritable, sectionName );
		}
		public static string ExceptionRemoveSectionHandler (string handler)
		{
			return Keys.GetString( Keys.ExceptionRemoveSectionHandler, handler );
		}
		public static string ExceptionInvalidXmlStorageFile (string fileName)
		{
			return Keys.GetString( Keys.ExceptionInvalidXmlStorageFile, fileName );
		}
		public static string ExceptionTypeCreateError (string typeName)
		{
			return Keys.GetString( Keys.ExceptionTypeCreateError, typeName );
		}
		public static string ExceptionInvalidArgumentType (string typeName)
		{
			return Keys.GetString( Keys.ExceptionInvalidArgumentType, typeName );
		}
		public static string ExceptionConfigurationFileNotFound (string path, string sectionName)
		{
			return Keys.GetString( Keys.ExceptionConfigurationFileNotFound, path, sectionName );
		}
		public static string ExceptionAttributeMissing (string attribute, string tag)
		{
			return Keys.GetString( Keys.ExceptionAttributeMissing, attribute, tag );
		}
		public static string ExceptionLoadingXml (string file, string message)
		{
			return Keys.GetString( Keys.ExceptionLoadingXml, file, message );
		}
		public static string ExceptionXmlStorageSectionNotFoundError (string sectionName, string fileName)
		{
			return Keys.GetString( Keys.ExceptionXmlStorageSectionNotFoundError, sectionName, fileName );
		}
		public static string ExceptionSectionNameInvalid (string sectionName, string requestedConfigFile, string otherConfigFile)
		{
			return Keys.GetString( Keys.ExceptionSectionNameInvalid, sectionName, requestedConfigFile, otherConfigFile );
		}
		public static string ExceptionNullProviderDataName
		{
			get { return Keys.GetString( Keys.ExceptionNullProviderDataName ); }
		}
		public static string ExceptionActivatorCacheCannotCreateType (string type)
		{
			return Keys.GetString( Keys.ExceptionActivatorCacheCannotCreateType, type );
		}
		public static string ExceptionCannotInstantiateProviderWithNullTypeName (string factoryName, string providerName)
		{
			return Keys.GetString( Keys.ExceptionCannotInstantiateProviderWithNullTypeName, factoryName, providerName );
		}
		public static string ExceptionCannotInstantiateProviderWithNullName (string factoryName, string providerName)
		{
			return Keys.GetString( Keys.ExceptionCannotInstantiateProviderWithNullName, factoryName, providerName );
		}
		public static string ExceptionProviderTypeMismatchExceptionMessage (string expectedType, string actualType)
		{
			return Keys.GetString( Keys.ExceptionProviderTypeMismatchExceptionMessage, expectedType, actualType );
		}
		public static string ExceptionProviderNotFoundExceptionMessage (string providerType, string providerName)
		{
			return Keys.GetString( Keys.ExceptionProviderNotFoundExceptionMessage, providerType, providerName );
		}
		public static string ExceptionDefaultProviderNotSpecified (string providerName)
		{
			return Keys.GetString( Keys.ExceptionDefaultProviderNotSpecified, providerName );
		}
		public static string ExceptionProviderMissingConstructor (string type)
		{
			return Keys.GetString( Keys.ExceptionProviderMissingConstructor, type );
		}
		public static string ExceptionFactoryTypeLoadError (string typeName, string factoryName)
		{
			return Keys.GetString( Keys.ExceptionFactoryTypeLoadError, typeName, factoryName );
		}
		public static string ExceptionFactoryTypeInvokeError (string typeName, string providerName, string factoryName)
		{
			return Keys.GetString( Keys.ExceptionFactoryTypeInvokeError, typeName, providerName, factoryName );
		}
		public static string ExceptionFactoryMethodAccessError (string typeName, string factoryName)
		{
			return Keys.GetString( Keys.ExceptionFactoryMethodAccessError, typeName, factoryName );
		}
		public static string ExceptionProviderNotTypeOfConfigurationProvider (string typeName)
		{
			return Keys.GetString( Keys.ExceptionProviderNotTypeOfConfigurationProvider, typeName );
		}
		public static string ExceptionOutOfRangeDpapiStorageMode
		{
			get { return Keys.GetString( Keys.ExceptionOutOfRangeDpapiStorageMode ); }
		}
		public static string ExceptionKeyAlgorithmPairLoad
		{
			get { return Keys.GetString( Keys.ExceptionKeyAlgorithmPairLoad ); }
		}
		public static string ExceptionNoKeyAlgorithmStorageProvider
		{
			get { return Keys.GetString( Keys.ExceptionNoKeyAlgorithmStorageProvider ); }
		}
		public static string ExceptionConfigurationSettingsMissing
		{
			get { return Keys.GetString( Keys.ExceptionConfigurationSettingsMissing ); }
		}
		public static string ExceptionEventRaisingFailed
		{
			get { return Keys.GetString( Keys.ExceptionEventRaisingFailed ); }
		}
		public static string ExceptionUnknown
		{
			get { return Keys.GetString( Keys.ExceptionUnknown ); }
		}
		public static string ExceptionConfigurationRegistryKeyInvalid (string sectionName)
		{
			return Keys.GetString( Keys.ExceptionConfigurationRegistryKeyInvalid, sectionName );
		}
		public static string ExceptionConfigurationRegistryKeyDisallowed (string keyName)
		{
			return Keys.GetString( Keys.ExceptionConfigurationRegistryKeyDisallowed, keyName );
		}
		public static string ExceptionConfigurationSqlConnectStringNull
		{
			get { return Keys.GetString( Keys.ExceptionConfigurationSqlConnectStringNull ); }
		}
		public static string ExceptionConfigurationSqlGetConfigNull
		{
			get { return Keys.GetString( Keys.ExceptionConfigurationSqlGetConfigNull ); }
		}
		public static string ExceptionConfigurationSqlSetConfigNull
		{
			get { return Keys.GetString( Keys.ExceptionConfigurationSqlSetConfigNull ); }
		}
		public static string ExceptionConfigurationSqlInvalidSection (string sectionName)
		{
			return Keys.GetString( Keys.ExceptionConfigurationSqlInvalidSection, sectionName );
		}
		public static string ExceptionConfigurationSqlCantSet (string sectionName)
		{
			return Keys.GetString( Keys.ExceptionConfigurationSqlCantSet, sectionName );
		}
		public static string ExceptionDisallowedHive
		{
			get { return Keys.GetString( Keys.ExceptionDisallowedHive ); }
		}
		public static string ExceptionSqlStorageSectionNotFoundError (string sectionName, string storedProc)
		{
			return Keys.GetString( Keys.ExceptionSqlStorageSectionNotFoundError, sectionName, storedProc );
		}
		public static string ExceptionRegistryStorageSectionNotFoundError (string sectionName, string hive)
		{
			return Keys.GetString( Keys.ExceptionRegistryStorageSectionNotFoundError, sectionName, hive );
		}
		public static string Transformer
		{
			get { return Keys.GetString( Keys.Transformer ); }
		}
		public static string StorageProvider
		{
			get { return Keys.GetString( Keys.StorageProvider ); }
		}
		public static string KeyAlgorithmPairStorageProvider
		{
			get { return Keys.GetString( Keys.KeyAlgorithmPairStorageProvider ); }
		}
		public static string Value
		{
			get { return Keys.GetString( Keys.Value ); }
		}
		public static string RegistryWatcherEventSource
		{
			get { return Keys.GetString( Keys.RegistryWatcherEventSource ); }
		}
		public static string SqlWatcherEventSource
		{
			get { return Keys.GetString( Keys.SqlWatcherEventSource ); }
		}
		public static string FileWatcherEventSource
		{
			get { return Keys.GetString( Keys.FileWatcherEventSource ); }
		}
		public static string ApplicationLog
		{
			get { return Keys.GetString( Keys.ApplicationLog ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Configuration.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Configuration.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, CultureInfo.CurrentUICulture );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, CultureInfo.CurrentUICulture );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string ExceptionManagerInvalidSectionName = "ExceptionManagerInvalidSectionName";
			public const string ExceptionConfigFileNotLoaded = "ExceptionConfigFileNotLoaded";
			public const string ExceptionUnrecognizedElement = "ExceptionUnrecognizedElement";
			public const string ExceptionConfigReserved = "ExceptionConfigReserved";
			public const string ExceptionLocationReserved = "ExceptionLocationReserved";
			public const string ExceptionOnlyOneConfigSections = "ExceptionOnlyOneConfigSections";
			public const string ExceptionMustBeXmlNode = "ExceptionMustBeXmlNode";
			public const string ExceptionNotInSerializedObj = "ExceptionNotInSerializedObj";
			public const string ExceptionSerializationTypeMissing = "ExceptionSerializationTypeMissing";
			public const string ExceptionSerializedObjectMissing = "ExceptionSerializedObjectMissing";
			public const string ExceptionItemAlreadyAdded = "ExceptionItemAlreadyAdded";
			public const string ExceptionKeyNotString = "ExceptionKeyNotString";
			public const string ExceptionUnregoconizedConfigSection = "ExceptionUnregoconizedConfigSection";
			public const string ExceptionSectionGroupIsDefined = "ExceptionSectionGroupIsDefined";
			public const string ExceptionUnrecognizedAttribute = "ExceptionUnrecognizedAttribute";
			public const string ExceptionNoRootConfigTag = "ExceptionNoRootConfigTag";
			public const string ExceptionCouldNotCreateType = "ExceptionCouldNotCreateType";
			public const string ExceptionNotICSH = "ExceptionNotICSH";
			public const string ExceptionHandlerNotWritable = "ExceptionHandlerNotWritable";
			public const string ExceptionRemoveSectionHandler = "ExceptionRemoveSectionHandler";
			public const string ExceptionInvalidXmlStorageFile = "ExceptionInvalidXmlStorageFile";
			public const string ExceptionTypeCreateError = "ExceptionTypeCreateError";
			public const string ExceptionInvalidArgumentType = "ExceptionInvalidArgumentType";
			public const string ExceptionConfigurationFileNotFound = "ExceptionConfigurationFileNotFound";
			public const string ExceptionAttributeMissing = "ExceptionAttributeMissing";
			public const string ExceptionLoadingXml = "ExceptionLoadingXml";
			public const string ExceptionXmlStorageSectionNotFoundError = "ExceptionXmlStorageSectionNotFoundError";
			public const string ExceptionSectionNameInvalid = "ExceptionSectionNameInvalid";
			public const string ExceptionNullProviderDataName = "ExceptionNullProviderDataName";
			public const string ExceptionActivatorCacheCannotCreateType = "ExceptionActivatorCacheCannotCreateType";
			public const string ExceptionCannotInstantiateProviderWithNullTypeName = "ExceptionCannotInstantiateProviderWithNullTypeName";
			public const string ExceptionCannotInstantiateProviderWithNullName = "ExceptionCannotInstantiateProviderWithNullName";
			public const string ExceptionProviderTypeMismatchExceptionMessage = "ExceptionProviderTypeMismatchExceptionMessage";
			public const string ExceptionProviderNotFoundExceptionMessage = "ExceptionProviderNotFoundExceptionMessage";
			public const string ExceptionDefaultProviderNotSpecified = "ExceptionDefaultProviderNotSpecified";
			public const string ExceptionProviderMissingConstructor = "ExceptionProviderMissingConstructor";
			public const string ExceptionFactoryTypeLoadError = "ExceptionFactoryTypeLoadError";
			public const string ExceptionFactoryTypeInvokeError = "ExceptionFactoryTypeInvokeError";
			public const string ExceptionFactoryMethodAccessError = "ExceptionFactoryMethodAccessError";
			public const string ExceptionProviderNotTypeOfConfigurationProvider = "ExceptionProviderNotTypeOfConfigurationProvider";
			public const string ExceptionOutOfRangeDpapiStorageMode = "ExceptionOutOfRangeDpapiStorageMode";
			public const string ExceptionKeyAlgorithmPairLoad = "ExceptionKeyAlgorithmPairLoad";
			public const string ExceptionNoKeyAlgorithmStorageProvider = "ExceptionNoKeyAlgorithmStorageProvider";
			public const string ExceptionConfigurationSettingsMissing = "ExceptionConfigurationSettingsMissing";
			public const string ExceptionEventRaisingFailed = "ExceptionEventRaisingFailed";
			public const string ExceptionUnknown = "ExceptionUnknown";
			public const string ExceptionConfigurationRegistryKeyInvalid = "ExceptionConfigurationRegistryKeyInvalid";
			public const string ExceptionConfigurationRegistryKeyDisallowed = "ExceptionConfigurationRegistryKeyDisallowed";
			public const string ExceptionConfigurationSqlConnectStringNull = "ExceptionConfigurationSqlConnectStringNull";
			public const string ExceptionConfigurationSqlGetConfigNull = "ExceptionConfigurationSqlGetConfigNull";
			public const string ExceptionConfigurationSqlSetConfigNull = "ExceptionConfigurationSqlSetConfigNull";
			public const string ExceptionConfigurationSqlInvalidSection = "ExceptionConfigurationSqlInvalidSection";
			public const string ExceptionConfigurationSqlCantSet = "ExceptionConfigurationSqlCantSet";
			public const string ExceptionDisallowedHive = "ExceptionDisallowedHive";
			public const string ExceptionSqlStorageSectionNotFoundError = "ExceptionSqlStorageSectionNotFoundError";
			public const string ExceptionRegistryStorageSectionNotFoundError = "ExceptionRegistryStorageSectionNotFoundError";
			public const string Transformer = "Transformer";
			public const string StorageProvider = "StorageProvider";
			public const string KeyAlgorithmPairStorageProvider = "KeyAlgorithmPairStorageProvider";
			public const string Value = "Value";
			public const string RegistryWatcherEventSource = "RegistryWatcherEventSource";
			public const string SqlWatcherEventSource = "SqlWatcherEventSource";
			public const string FileWatcherEventSource = "FileWatcherEventSource";
			public const string ApplicationLog = "ApplicationLog";
		}


	}
}
