// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Configuration.Design
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string ExceptionAppAlreadyOpened
		{
			get { return Keys.GetString( Keys.ExceptionAppAlreadyOpened ); }
		}
		public static string ExceptionComponentNotSited
		{
			get { return Keys.GetString( Keys.ExceptionComponentNotSited ); }
		}
		public static string ExceptionServiceUnavailable (string serviceTypeName)
		{
			return Keys.GetString( Keys.ExceptionServiceUnavailable, serviceTypeName );
		}
		public static string ExceptionProfferServiceCOMFailure (string serviceTypeName)
		{
			return Keys.GetString( Keys.ExceptionProfferServiceCOMFailure, serviceTypeName );
		}
		public static string ExceptionServiceExists (string serviceTypeName)
		{
			return Keys.GetString( Keys.ExceptionServiceExists, serviceTypeName );
		}
		public static string ExceptionInvalidServiceInstance
		{
			get { return Keys.GetString( Keys.ExceptionInvalidServiceInstance ); }
		}
		public static string ExceptionInvalidComponentName (string name)
		{
			return Keys.GetString( Keys.ExceptionInvalidComponentName, name );
		}
		public static string ExceptionValueNullMessage (string name)
		{
			return Keys.GetString( Keys.ExceptionValueNullMessage, name );
		}
		public static string ExceptionFilesNotSaved
		{
			get { return Keys.GetString( Keys.ExceptionFilesNotSaved ); }
		}
		public static string ExceptionFileAlreadyExists (string file)
		{
			return Keys.GetString( Keys.ExceptionFileAlreadyExists, file );
		}
		public static string ExceptionNotAssignableType (string assemblyName, string typeName)
		{
			return Keys.GetString( Keys.ExceptionNotAssignableType, assemblyName, typeName );
		}
		public static string ExceptionNodeNameAlreadyExists (string name)
		{
			return Keys.GetString( Keys.ExceptionNodeNameAlreadyExists, name );
		}
		public static string ExceptionConfigNodeCompareError (string typeName)
		{
			return Keys.GetString( Keys.ExceptionConfigNodeCompareError, typeName );
		}
		public static string ExceptionOnlyReorderSiblings
		{
			get { return Keys.GetString( Keys.ExceptionOnlyReorderSiblings ); }
		}
		public static string ExceptionConfigNodeExpected
		{
			get { return Keys.GetString( Keys.ExceptionConfigNodeExpected ); }
		}
		public static string ExceptionLowerBoundOutOfRange (string lowerBound, string upperBound)
		{
			return Keys.GetString( Keys.ExceptionLowerBoundOutOfRange, lowerBound, upperBound );
		}
		public static string ExceptionNoRefPathAttribute
		{
			get { return Keys.GetString( Keys.ExceptionNoRefPathAttribute ); }
		}
		public static string ExceptionNoBaseTypeAttribute
		{
			get { return Keys.GetString( Keys.ExceptionNoBaseTypeAttribute ); }
		}
		public static string ExceptionTypeNotValid (string typeName)
		{
			return Keys.GetString( Keys.ExceptionTypeNotValid, typeName );
		}
		public static string ExceptionTypeNotConfigurationNode (string typeName)
		{
			return Keys.GetString( Keys.ExceptionTypeNotConfigurationNode, typeName );
		}
		public static string RemoveNodeMenuItemText
		{
			get { return Keys.GetString( Keys.RemoveNodeMenuItemText ); }
		}
		public static string ValidateNodeMenuItemText
		{
			get { return Keys.GetString( Keys.ValidateNodeMenuItemText ); }
		}
		public static string ConfigurationSectionCollectionMenuItemText
		{
			get { return Keys.GetString( Keys.ConfigurationSectionCollectionMenuItemText ); }
		}
		public static string ConfigurationSectionMenuItemText
		{
			get { return Keys.GetString( Keys.ConfigurationSectionMenuItemText ); }
		}
		public static string XmlIncludeTypeMenuItem
		{
			get { return Keys.GetString( Keys.XmlIncludeTypeMenuItem ); }
		}
		public static string CloseApplicationMenuItemText
		{
			get { return Keys.GetString( Keys.CloseApplicationMenuItemText ); }
		}
		public static string RemoveNodeMenuItemStatusText
		{
			get { return Keys.GetString( Keys.RemoveNodeMenuItemStatusText ); }
		}
		public static string ValidateNodeMenuItemStatusText
		{
			get { return Keys.GetString( Keys.ValidateNodeMenuItemStatusText ); }
		}
		public static string ConfigurationSectionCollectionStatusText
		{
			get { return Keys.GetString( Keys.ConfigurationSectionCollectionStatusText ); }
		}
		public static string GenericCreateStatusText (string name)
		{
			return Keys.GetString( Keys.GenericCreateStatusText, name );
		}
		public static string ConfigurationSectionStatusText
		{
			get { return Keys.GetString( Keys.ConfigurationSectionStatusText ); }
		}
		public static string CloseApplicationStatusText
		{
			get { return Keys.GetString( Keys.CloseApplicationStatusText ); }
		}
		public static string SaveApplicationRequest
		{
			get { return Keys.GetString( Keys.SaveApplicationRequest ); }
		}
		public static string OverwriteFilesCaption
		{
			get { return Keys.GetString( Keys.OverwriteFilesCaption ); }
		}
		public static string OverwriteFilesMessage (string file)
		{
			return Keys.GetString( Keys.OverwriteFilesMessage, file );
		}
		public static string SaveApplicationErrorMessage
		{
			get { return Keys.GetString( Keys.SaveApplicationErrorMessage ); }
		}
		public static string SaveApplicationErrorRequestMessage
		{
			get { return Keys.GetString( Keys.SaveApplicationErrorRequestMessage ); }
		}
		public static string SaveApplicationCaption
		{
			get { return Keys.GetString( Keys.SaveApplicationCaption ); }
		}
		public static string ValidationErrorsMessage
		{
			get { return Keys.GetString( Keys.ValidationErrorsMessage ); }
		}
		public static string OpenApplicationCaption
		{
			get { return Keys.GetString( Keys.OpenApplicationCaption ); }
		}
		public static string OpenApplicationErrorMessage
		{
			get { return Keys.GetString( Keys.OpenApplicationErrorMessage ); }
		}
		public static string ValidationCaption
		{
			get { return Keys.GetString( Keys.ValidationCaption ); }
		}
		public static string CanNotSaveApplicationMessage
		{
			get { return Keys.GetString( Keys.CanNotSaveApplicationMessage ); }
		}
		public static string RemoveLinkedNodeMessage (string nodeName)
		{
			return Keys.GetString( Keys.RemoveLinkedNodeMessage, nodeName );
		}
		public static string RemoveNodeCaption
		{
			get { return Keys.GetString( Keys.RemoveNodeCaption ); }
		}
		public static string DefaultApplicationName
		{
			get { return Keys.GetString( Keys.DefaultApplicationName ); }
		}
		public static string GenericFileFilter
		{
			get { return Keys.GetString( Keys.GenericFileFilter ); }
		}
		public static string ConfigurationFileFilter
		{
			get { return Keys.GetString( Keys.ConfigurationFileFilter ); }
		}
		public static string GenericSaveFile
		{
			get { return Keys.GetString( Keys.GenericSaveFile ); }
		}
		public static string CategoryGeneral
		{
			get { return Keys.GetString( Keys.CategoryGeneral ); }
		}
		public static string None
		{
			get { return Keys.GetString( Keys.None ); }
		}
		public static string ValidationErrorToString (string property, string invalidObject, string invalidObjectType, string message)
		{
			return Keys.GetString( Keys.ValidationErrorToString, property, invalidObject, invalidObjectType, message );
		}
		public static string ConfigurationErrorToString (string name, string path, string errorMessage)
		{
			return Keys.GetString( Keys.ConfigurationErrorToString, name, path, errorMessage );
		}
		public static string ConfigurationErrorCollectionToString
		{
			get { return Keys.GetString( Keys.ConfigurationErrorCollectionToString ); }
		}
		public static string RegExErrorMessage (string value)
		{
			return Keys.GetString( Keys.RegExErrorMessage, value );
		}
		public static string ValueNotInRangeErrorMessage (string name)
		{
			return Keys.GetString( Keys.ValueNotInRangeErrorMessage, name );
		}
		public static string ValueOutsideRangeErrorMessage (string name)
		{
			return Keys.GetString( Keys.ValueOutsideRangeErrorMessage, name );
		}
		public static string MaxLengthExceededErrorMessage (string name, int length)
		{
			return Keys.GetString( Keys.MaxLengthExceededErrorMessage, name, length );
		}
		public static string MinLengthExceededErrorMessage (string name, int length)
		{
			return Keys.GetString( Keys.MinLengthExceededErrorMessage, name, length );
		}
		public static string TypeSubclassErrorMsg (string typeName)
		{
			return Keys.GetString( Keys.TypeSubclassErrorMsg, typeName );
		}
		public static string AssemblyLoadFailedErrorMessage (string message)
		{
			return Keys.GetString( Keys.AssemblyLoadFailedErrorMessage, message );
		}
		public static string TypeSelectorInterfaceRootNodeText (string typeName)
		{
			return Keys.GetString( Keys.TypeSelectorInterfaceRootNodeText, typeName );
		}
		public static string TypeSelectorClassRootNodeText (string typeName)
		{
			return Keys.GetString( Keys.TypeSelectorClassRootNodeText, typeName );
		}
		public static string NoTypesFoundInAssemblyErrorMessage (string assemblyName, string baseType)
		{
			return Keys.GetString( Keys.NoTypesFoundInAssemblyErrorMessage, assemblyName, baseType );
		}
		public static string NoTypesFoundInAssemblyCaption
		{
			get { return Keys.GetString( Keys.NoTypesFoundInAssemblyCaption ); }
		}
		public static string ConfigurationFilePathDescription
		{
			get { return Keys.GetString( Keys.ConfigurationFilePathDescription ); }
		}
		public static string ConfigurationDefaultSectionDescription
		{
			get { return Keys.GetString( Keys.ConfigurationDefaultSectionDescription ); }
		}
		public static string DefaultConfigurationSectionCollectionNodeName
		{
			get { return Keys.GetString( Keys.DefaultConfigurationSectionCollectionNodeName ); }
		}
		public static string DefaultConfigurationSectionNodeName
		{
			get { return Keys.GetString( Keys.DefaultConfigurationSectionNodeName ); }
		}
		public static string ConfigurationSectionNodeEncryptDescription
		{
			get { return Keys.GetString( Keys.ConfigurationSectionNodeEncryptDescription ); }
		}
		public static string XmlFileStorageProviderNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.XmlFileStorageProviderNodeTypeNameDescription ); }
		}
		public static string XmlFileStorageProviderNodeFileNameDescription
		{
			get { return Keys.GetString( Keys.XmlFileStorageProviderNodeFileNameDescription ); }
		}
		public static string XMLStorageProviderNodeFriendlyName
		{
			get { return Keys.GetString( Keys.XMLStorageProviderNodeFriendlyName ); }
		}
		public static string XmlSerializerTransformerNodeFriendlyName
		{
			get { return Keys.GetString( Keys.XmlSerializerTransformerNodeFriendlyName ); }
		}
		public static string DefaultXmlIncludeTypeNodeName
		{
			get { return Keys.GetString( Keys.DefaultXmlIncludeTypeNodeName ); }
		}
		public static string ConfigurationFileDialogFilter
		{
			get { return Keys.GetString( Keys.ConfigurationFileDialogFilter ); }
		}
		public static string OverwriteFileMessage (string fileName)
		{
			return Keys.GetString( Keys.OverwriteFileMessage, fileName );
		}
		public static string OverwriteFileCaption
		{
			get { return Keys.GetString( Keys.OverwriteFileCaption ); }
		}
		public static string DefaultFileKeyAlgorithmStorageProviderNodeName
		{
			get { return Keys.GetString( Keys.DefaultFileKeyAlgorithmStorageProviderNodeName ); }
		}
		public static string FileKeyAlgorithmStorageProviderNodeFriendlyName
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmStorageProviderNodeFriendlyName ); }
		}
		public static string ConfigurationSectionNodeFriendlyName
		{
			get { return Keys.GetString( Keys.ConfigurationSectionNodeFriendlyName ); }
		}
		public static string ReadOnlyConfigurationSectionNodeFriendlyName
		{
			get { return Keys.GetString( Keys.ReadOnlyConfigurationSectionNodeFriendlyName ); }
		}
		public static string DefaultEncryptionSettingsNodeName
		{
			get { return Keys.GetString( Keys.DefaultEncryptionSettingsNodeName ); }
		}
		public static string EncryptionSettingsNodeKeyAlgorithmPairDescription
		{
			get { return Keys.GetString( Keys.EncryptionSettingsNodeKeyAlgorithmPairDescription ); }
		}
		public static string KeyInfoLabelToString
		{
			get { return Keys.GetString( Keys.KeyInfoLabelToString ); }
		}
		public static string KeyManagerUIInvalidKeyLengthErrorMessage
		{
			get { return Keys.GetString( Keys.KeyManagerUIInvalidKeyLengthErrorMessage ); }
		}
		public static string KeyManagerUIInvalidKeyCharactersErrorMessage
		{
			get { return Keys.GetString( Keys.KeyManagerUIInvalidKeyCharactersErrorMessage ); }
		}
		public static string FileKeyAlgorithmWizardLoadIntroText
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmWizardLoadIntroText ); }
		}
		public static string FileKeyAlgorithmWizardSaveIntroText
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmWizardSaveIntroText ); }
		}
		public static string FileKeyAlgorithmWizardDpapiLoadLabelText
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmWizardDpapiLoadLabelText ); }
		}
		public static string FileKeyAlgorithmWizardDpapiSaveLabelText
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmWizardDpapiSaveLabelText ); }
		}
		public static string FileKeyAlgorithmWizardUnableToLoadKeyErrorMessage (string message)
		{
			return Keys.GetString( Keys.FileKeyAlgorithmWizardUnableToLoadKeyErrorMessage, message );
		}
		public static string FileKeyAlgorithmWizardUnableToLoadKeyCaption
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmWizardUnableToLoadKeyCaption ); }
		}
		public static string FileKeyAlgorithmStorageProviderNodeKeyAlgorithmPairDescription
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmStorageProviderNodeKeyAlgorithmPairDescription ); }
		}
		public static string FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsErrorMessage (string reason)
		{
			return Keys.GetString( Keys.FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsErrorMessage, reason );
		}
		public static string FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsCaption
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsCaption ); }
		}
		public static string KeyAlgorithmStorageProviderRequiredValidationErrorMessage
		{
			get { return Keys.GetString( Keys.KeyAlgorithmStorageProviderRequiredValidationErrorMessage ); }
		}
		public static string DpapiSettingsFirstRunInstructionMessage
		{
			get { return Keys.GetString( Keys.DpapiSettingsFirstRunInstructionMessage ); }
		}
		public static string DpapiSettingsWarningMessage
		{
			get { return Keys.GetString( Keys.DpapiSettingsWarningMessage ); }
		}
		public static string DpapiMissingModeCaption
		{
			get { return Keys.GetString( Keys.DpapiMissingModeCaption ); }
		}
		public static string DpapiMissingModeErrorMessage
		{
			get { return Keys.GetString( Keys.DpapiMissingModeErrorMessage ); }
		}
		public static string DpapiChangeConfirmCaption
		{
			get { return Keys.GetString( Keys.DpapiChangeConfirmCaption ); }
		}
		public static string DpapiChangeConfirmMessage
		{
			get { return Keys.GetString( Keys.DpapiChangeConfirmMessage ); }
		}
		public static string DpapiConvertKeyConfirmMessage
		{
			get { return Keys.GetString( Keys.DpapiConvertKeyConfirmMessage ); }
		}
		public static string DpapiEntropyMinSizeCaption
		{
			get { return Keys.GetString( Keys.DpapiEntropyMinSizeCaption ); }
		}
		public static string DpapiEntropyConvertErrorMessage
		{
			get { return Keys.GetString( Keys.DpapiEntropyConvertErrorMessage ); }
		}
		public static string DefaultDpapiModeToString
		{
			get { return Keys.GetString( Keys.DefaultDpapiModeToString ); }
		}
		public static string DpapiModeToString (string mode)
		{
			return Keys.GetString( Keys.DpapiModeToString, mode );
		}
		public static string DpapiInformationMessage
		{
			get { return Keys.GetString( Keys.DpapiInformationMessage ); }
		}
		public static string DpapiInformationCaption
		{
			get { return Keys.GetString( Keys.DpapiInformationCaption ); }
		}
		public static string MismatchedPasswordMessage
		{
			get { return Keys.GetString( Keys.MismatchedPasswordMessage ); }
		}
		public static string MismatchedPasswordCaption
		{
			get { return Keys.GetString( Keys.MismatchedPasswordCaption ); }
		}
		public static string NodeNameDescription
		{
			get { return Keys.GetString( Keys.NodeNameDescription ); }
		}
		public static string TypeNameDescription
		{
			get { return Keys.GetString( Keys.TypeNameDescription ); }
		}
		public static string CustomStorageProviderNodeDefaultName
		{
			get { return Keys.GetString( Keys.CustomStorageProviderNodeDefaultName ); }
		}
		public static string CustomTransformerNodeDefaultName
		{
			get { return Keys.GetString( Keys.CustomTransformerNodeDefaultName ); }
		}
		public static string CustomKeyAlgorithmPairStorageProviderNodeDefaultName
		{
			get { return Keys.GetString( Keys.CustomKeyAlgorithmPairStorageProviderNodeDefaultName ); }
		}
		public static string CustomStorageProviderAttributesDescription
		{
			get { return Keys.GetString( Keys.CustomStorageProviderAttributesDescription ); }
		}
		public static string CustomTransformerAttributesDescription
		{
			get { return Keys.GetString( Keys.CustomTransformerAttributesDescription ); }
		}
		public static string CustomKeyAlgorithmPairStorageProviderAttributesDescription
		{
			get { return Keys.GetString( Keys.CustomKeyAlgorithmPairStorageProviderAttributesDescription ); }
		}
		public static string CustomStorageProviderNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.CustomStorageProviderNodeTypeNameDescription ); }
		}
		public static string CustomTransformerNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.CustomTransformerNodeTypeNameDescription ); }
		}
		public static string CustomKeyAlgorithmPairStorageProviderNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.CustomKeyAlgorithmPairStorageProviderNodeTypeNameDescription ); }
		}
		public static string KeyFilesString
		{
			get { return Keys.GetString( Keys.KeyFilesString ); }
		}
		public static string FileKeyAlgorithmStorageProviderNodeDpapiSettingsDescription
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmStorageProviderNodeDpapiSettingsDescription ); }
		}
		public static string FileKeyAlgorithmStorageProviderNodeFileDescription
		{
			get { return Keys.GetString( Keys.FileKeyAlgorithmStorageProviderNodeFileDescription ); }
		}
		public static string AssembliesLabelText
		{
			get { return Keys.GetString( Keys.AssembliesLabelText ); }
		}
		public static string AppConfigFileStorageProviderNodeName
		{
			get { return Keys.GetString( Keys.AppConfigFileStorageProviderNodeName ); }
		}
		public static string AppConfigFileStorageProviderMenuName
		{
			get { return Keys.GetString( Keys.AppConfigFileStorageProviderMenuName ); }
		}
		public static string SqlStorageProviderNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeTypeNameDescription ); }
		}
		public static string SqlStorageProviderNodeConnStringDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeConnStringDescription ); }
		}
		public static string SqlStorageProviderNodeUserDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeUserDescription ); }
		}
		public static string SqlStorageProviderNodePwdDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodePwdDescription ); }
		}
		public static string SqlStorageProviderNodeServerDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeServerDescription ); }
		}
		public static string SqlStorageProviderNodeDatabaseDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeDatabaseDescription ); }
		}
		public static string SqlStorageProviderNodeGetSPDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeGetSPDescription ); }
		}
		public static string SqlStorageProviderNodeSetSPDescription
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeSetSPDescription ); }
		}
		public static string SqlStorageProviderNodeName
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeName ); }
		}
		public static string SqlStorageProviderNodeMenuName
		{
			get { return Keys.GetString( Keys.SqlStorageProviderNodeMenuName ); }
		}
		public static string RegistryStorageProviderNodeTypeNameDescription
		{
			get { return Keys.GetString( Keys.RegistryStorageProviderNodeTypeNameDescription ); }
		}
		public static string RegistryStorageProviderNodeHiveDescription
		{
			get { return Keys.GetString( Keys.RegistryStorageProviderNodeHiveDescription ); }
		}
		public static string RegistryStorageProviderNodeKeyDescription
		{
			get { return Keys.GetString( Keys.RegistryStorageProviderNodeKeyDescription ); }
		}
		public static string RegistryStorageProviderNodeName
		{
			get { return Keys.GetString( Keys.RegistryStorageProviderNodeName ); }
		}
		public static string RegistryStorageProviderNodeMenuName
		{
			get { return Keys.GetString( Keys.RegistryStorageProviderNodeMenuName ); }
		}
		public static string ExceptionSerializationTypeMissing
		{
			get { return Keys.GetString( Keys.ExceptionSerializationTypeMissing ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Configuration.Design.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Configuration.Design.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, CultureInfo.CurrentUICulture );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, CultureInfo.CurrentUICulture );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string ExceptionAppAlreadyOpened = "ExceptionAppAlreadyOpened";
			public const string ExceptionComponentNotSited = "ExceptionComponentNotSited";
			public const string ExceptionServiceUnavailable = "ExceptionServiceUnavailable";
			public const string ExceptionProfferServiceCOMFailure = "ExceptionProfferServiceCOMFailure";
			public const string ExceptionServiceExists = "ExceptionServiceExists";
			public const string ExceptionInvalidServiceInstance = "ExceptionInvalidServiceInstance";
			public const string ExceptionInvalidComponentName = "ExceptionInvalidComponentName";
			public const string ExceptionValueNullMessage = "ExceptionValueNullMessage";
			public const string ExceptionFilesNotSaved = "ExceptionFilesNotSaved";
			public const string ExceptionFileAlreadyExists = "ExceptionFileAlreadyExists";
			public const string ExceptionNotAssignableType = "ExceptionNotAssignableType";
			public const string ExceptionNodeNameAlreadyExists = "ExceptionNodeNameAlreadyExists";
			public const string ExceptionConfigNodeCompareError = "ExceptionConfigNodeCompareError";
			public const string ExceptionOnlyReorderSiblings = "ExceptionOnlyReorderSiblings";
			public const string ExceptionConfigNodeExpected = "ExceptionConfigNodeExpected";
			public const string ExceptionLowerBoundOutOfRange = "ExceptionLowerBoundOutOfRange";
			public const string ExceptionNoRefPathAttribute = "ExceptionNoRefPathAttribute";
			public const string ExceptionNoBaseTypeAttribute = "ExceptionNoBaseTypeAttribute";
			public const string ExceptionTypeNotValid = "ExceptionTypeNotValid";
			public const string ExceptionTypeNotConfigurationNode = "ExceptionTypeNotConfigurationNode";
			public const string RemoveNodeMenuItemText = "RemoveNodeMenuItemText";
			public const string ValidateNodeMenuItemText = "ValidateNodeMenuItemText";
			public const string ConfigurationSectionCollectionMenuItemText = "ConfigurationSectionCollectionMenuItemText";
			public const string ConfigurationSectionMenuItemText = "ConfigurationSectionMenuItemText";
			public const string XmlIncludeTypeMenuItem = "XmlIncludeTypeMenuItem";
			public const string CloseApplicationMenuItemText = "CloseApplicationMenuItemText";
			public const string RemoveNodeMenuItemStatusText = "RemoveNodeMenuItemStatusText";
			public const string ValidateNodeMenuItemStatusText = "ValidateNodeMenuItemStatusText";
			public const string ConfigurationSectionCollectionStatusText = "ConfigurationSectionCollectionStatusText";
			public const string GenericCreateStatusText = "GenericCreateStatusText";
			public const string ConfigurationSectionStatusText = "ConfigurationSectionStatusText";
			public const string CloseApplicationStatusText = "CloseApplicationStatusText";
			public const string SaveApplicationRequest = "SaveApplicationRequest";
			public const string OverwriteFilesCaption = "OverwriteFilesCaption";
			public const string OverwriteFilesMessage = "OverwriteFilesMessage";
			public const string SaveApplicationErrorMessage = "SaveApplicationErrorMessage";
			public const string SaveApplicationErrorRequestMessage = "SaveApplicationErrorRequestMessage";
			public const string SaveApplicationCaption = "SaveApplicationCaption";
			public const string ValidationErrorsMessage = "ValidationErrorsMessage";
			public const string OpenApplicationCaption = "OpenApplicationCaption";
			public const string OpenApplicationErrorMessage = "OpenApplicationErrorMessage";
			public const string ValidationCaption = "ValidationCaption";
			public const string CanNotSaveApplicationMessage = "CanNotSaveApplicationMessage";
			public const string RemoveLinkedNodeMessage = "RemoveLinkedNodeMessage";
			public const string RemoveNodeCaption = "RemoveNodeCaption";
			public const string DefaultApplicationName = "DefaultApplicationName";
			public const string GenericFileFilter = "GenericFileFilter";
			public const string ConfigurationFileFilter = "ConfigurationFileFilter";
			public const string GenericSaveFile = "GenericSaveFile";
			public const string CategoryGeneral = "CategoryGeneral";
			public const string None = "None";
			public const string ValidationErrorToString = "ValidationErrorToString";
			public const string ConfigurationErrorToString = "ConfigurationErrorToString";
			public const string ConfigurationErrorCollectionToString = "ConfigurationErrorCollectionToString";
			public const string RegExErrorMessage = "RegExErrorMessage";
			public const string ValueNotInRangeErrorMessage = "ValueNotInRangeErrorMessage";
			public const string ValueOutsideRangeErrorMessage = "ValueOutsideRangeErrorMessage";
			public const string MaxLengthExceededErrorMessage = "MaxLengthExceededErrorMessage";
			public const string MinLengthExceededErrorMessage = "MinLengthExceededErrorMessage";
			public const string TypeSubclassErrorMsg = "TypeSubclassErrorMsg";
			public const string AssemblyLoadFailedErrorMessage = "AssemblyLoadFailedErrorMessage";
			public const string TypeSelectorInterfaceRootNodeText = "TypeSelectorInterfaceRootNodeText";
			public const string TypeSelectorClassRootNodeText = "TypeSelectorClassRootNodeText";
			public const string NoTypesFoundInAssemblyErrorMessage = "NoTypesFoundInAssemblyErrorMessage";
			public const string NoTypesFoundInAssemblyCaption = "NoTypesFoundInAssemblyCaption";
			public const string ConfigurationFilePathDescription = "ConfigurationFilePathDescription";
			public const string ConfigurationDefaultSectionDescription = "ConfigurationDefaultSectionDescription";
			public const string DefaultConfigurationSectionCollectionNodeName = "DefaultConfigurationSectionCollectionNodeName";
			public const string DefaultConfigurationSectionNodeName = "DefaultConfigurationSectionNodeName";
			public const string ConfigurationSectionNodeEncryptDescription = "ConfigurationSectionNodeEncryptDescription";
			public const string XmlFileStorageProviderNodeTypeNameDescription = "XmlFileStorageProviderNodeTypeNameDescription";
			public const string XmlFileStorageProviderNodeFileNameDescription = "XmlFileStorageProviderNodeFileNameDescription";
			public const string XMLStorageProviderNodeFriendlyName = "XMLStorageProviderNodeFriendlyName";
			public const string XmlSerializerTransformerNodeFriendlyName = "XmlSerializerTransformerNodeFriendlyName";
			public const string DefaultXmlIncludeTypeNodeName = "DefaultXmlIncludeTypeNodeName";
			public const string ConfigurationFileDialogFilter = "ConfigurationFileDialogFilter";
			public const string OverwriteFileMessage = "OverwriteFileMessage";
			public const string OverwriteFileCaption = "OverwriteFileCaption";
			public const string DefaultFileKeyAlgorithmStorageProviderNodeName = "DefaultFileKeyAlgorithmStorageProviderNodeName";
			public const string FileKeyAlgorithmStorageProviderNodeFriendlyName = "FileKeyAlgorithmStorageProviderNodeFriendlyName";
			public const string ConfigurationSectionNodeFriendlyName = "ConfigurationSectionNodeFriendlyName";
			public const string ReadOnlyConfigurationSectionNodeFriendlyName = "ReadOnlyConfigurationSectionNodeFriendlyName";
			public const string DefaultEncryptionSettingsNodeName = "DefaultEncryptionSettingsNodeName";
			public const string EncryptionSettingsNodeKeyAlgorithmPairDescription = "EncryptionSettingsNodeKeyAlgorithmPairDescription";
			public const string KeyInfoLabelToString = "KeyInfoLabelToString";
			public const string KeyManagerUIInvalidKeyLengthErrorMessage = "KeyManagerUIInvalidKeyLengthErrorMessage";
			public const string KeyManagerUIInvalidKeyCharactersErrorMessage = "KeyManagerUIInvalidKeyCharactersErrorMessage";
			public const string FileKeyAlgorithmWizardLoadIntroText = "FileKeyAlgorithmWizardLoadIntroText";
			public const string FileKeyAlgorithmWizardSaveIntroText = "FileKeyAlgorithmWizardSaveIntroText";
			public const string FileKeyAlgorithmWizardDpapiLoadLabelText = "FileKeyAlgorithmWizardDpapiLoadLabelText";
			public const string FileKeyAlgorithmWizardDpapiSaveLabelText = "FileKeyAlgorithmWizardDpapiSaveLabelText";
			public const string FileKeyAlgorithmWizardUnableToLoadKeyErrorMessage = "FileKeyAlgorithmWizardUnableToLoadKeyErrorMessage";
			public const string FileKeyAlgorithmWizardUnableToLoadKeyCaption = "FileKeyAlgorithmWizardUnableToLoadKeyCaption";
			public const string FileKeyAlgorithmStorageProviderNodeKeyAlgorithmPairDescription = "FileKeyAlgorithmStorageProviderNodeKeyAlgorithmPairDescription";
			public const string FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsErrorMessage = "FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsErrorMessage";
			public const string FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsCaption = "FileKeyAlgorithmDpapiSettingsEditorUnableToSaveNewDpapiSettingsCaption";
			public const string KeyAlgorithmStorageProviderRequiredValidationErrorMessage = "KeyAlgorithmStorageProviderRequiredValidationErrorMessage";
			public const string DpapiSettingsFirstRunInstructionMessage = "DpapiSettingsFirstRunInstructionMessage";
			public const string DpapiSettingsWarningMessage = "DpapiSettingsWarningMessage";
			public const string DpapiMissingModeCaption = "DpapiMissingModeCaption";
			public const string DpapiMissingModeErrorMessage = "DpapiMissingModeErrorMessage";
			public const string DpapiChangeConfirmCaption = "DpapiChangeConfirmCaption";
			public const string DpapiChangeConfirmMessage = "DpapiChangeConfirmMessage";
			public const string DpapiConvertKeyConfirmMessage = "DpapiConvertKeyConfirmMessage";
			public const string DpapiEntropyMinSizeCaption = "DpapiEntropyMinSizeCaption";
			public const string DpapiEntropyConvertErrorMessage = "DpapiEntropyConvertErrorMessage";
			public const string DefaultDpapiModeToString = "DefaultDpapiModeToString";
			public const string DpapiModeToString = "DpapiModeToString";
			public const string DpapiInformationMessage = "DpapiInformationMessage";
			public const string DpapiInformationCaption = "DpapiInformationCaption";
			public const string MismatchedPasswordMessage = "MismatchedPasswordMessage";
			public const string MismatchedPasswordCaption = "MismatchedPasswordCaption";
			public const string NodeNameDescription = "NodeNameDescription";
			public const string TypeNameDescription = "TypeNameDescription";
			public const string CustomStorageProviderNodeDefaultName = "CustomStorageProviderNodeDefaultName";
			public const string CustomTransformerNodeDefaultName = "CustomTransformerNodeDefaultName";
			public const string CustomKeyAlgorithmPairStorageProviderNodeDefaultName = "CustomKeyAlgorithmPairStorageProviderNodeDefaultName";
			public const string CustomStorageProviderAttributesDescription = "CustomStorageProviderAttributesDescription";
			public const string CustomTransformerAttributesDescription = "CustomTransformerAttributesDescription";
			public const string CustomKeyAlgorithmPairStorageProviderAttributesDescription = "CustomKeyAlgorithmPairStorageProviderAttributesDescription";
			public const string CustomStorageProviderNodeTypeNameDescription = "CustomStorageProviderNodeTypeNameDescription";
			public const string CustomTransformerNodeTypeNameDescription = "CustomTransformerNodeTypeNameDescription";
			public const string CustomKeyAlgorithmPairStorageProviderNodeTypeNameDescription = "CustomKeyAlgorithmPairStorageProviderNodeTypeNameDescription";
			public const string KeyFilesString = "KeyFilesString";
			public const string FileKeyAlgorithmStorageProviderNodeDpapiSettingsDescription = "FileKeyAlgorithmStorageProviderNodeDpapiSettingsDescription";
			public const string FileKeyAlgorithmStorageProviderNodeFileDescription = "FileKeyAlgorithmStorageProviderNodeFileDescription";
			public const string AssembliesLabelText = "AssembliesLabelText";
			public const string AppConfigFileStorageProviderNodeName = "AppConfigFileStorageProviderNodeName";
			public const string AppConfigFileStorageProviderMenuName = "AppConfigFileStorageProviderMenuName";
			public const string SqlStorageProviderNodeTypeNameDescription = "SqlStorageProviderNodeTypeNameDescription";
			public const string SqlStorageProviderNodeConnStringDescription = "SqlStorageProviderNodeConnStringDescription";
			public const string SqlStorageProviderNodeUserDescription = "SqlStorageProviderNodeUserDescription";
			public const string SqlStorageProviderNodePwdDescription = "SqlStorageProviderNodePwdDescription";
			public const string SqlStorageProviderNodeServerDescription = "SqlStorageProviderNodeServerDescription";
			public const string SqlStorageProviderNodeDatabaseDescription = "SqlStorageProviderNodeDatabaseDescription";
			public const string SqlStorageProviderNodeGetSPDescription = "SqlStorageProviderNodeGetSPDescription";
			public const string SqlStorageProviderNodeSetSPDescription = "SqlStorageProviderNodeSetSPDescription";
			public const string SqlStorageProviderNodeName = "SqlStorageProviderNodeName";
			public const string SqlStorageProviderNodeMenuName = "SqlStorageProviderNodeMenuName";
			public const string RegistryStorageProviderNodeTypeNameDescription = "RegistryStorageProviderNodeTypeNameDescription";
			public const string RegistryStorageProviderNodeHiveDescription = "RegistryStorageProviderNodeHiveDescription";
			public const string RegistryStorageProviderNodeKeyDescription = "RegistryStorageProviderNodeKeyDescription";
			public const string RegistryStorageProviderNodeName = "RegistryStorageProviderNodeName";
			public const string RegistryStorageProviderNodeMenuName = "RegistryStorageProviderNodeMenuName";
			public const string ExceptionSerializationTypeMissing = "ExceptionSerializationTypeMissing";
		}


	}
}
