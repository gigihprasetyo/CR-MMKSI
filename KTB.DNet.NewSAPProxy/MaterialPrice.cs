
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a SAP. NET Connector Proxy Generator Version 2.0
//     Created at 12/2/2009
//     Created from Windows
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Xml.Serialization;
using System.Xml.Schema;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using SAP.Connector;

namespace KTB.DNet.NewSAPProxy
{

  /// <summary>
  /// Client SAP proxy class
  /// </summary>
  [WebServiceBinding(Name="dummy.Binding", Namespace="urn:sap-com:document:sap:rfc:functions")]
  [Serializable]
  public class MaterialPrice : SAPClient
  {
    /// <summary>
    /// Initializes a new MaterialPrice.
    /// </summary>
    /// 
    public MaterialPrice(){}

    /// <summary>
    /// Initializes a new MaterialPrice with a new connection based on the specified connection string.
    /// </summary>
    /// <param name="connectionString">A connection string (e.g. RFC or URL) specifying the system where the proxy should connect to.</param>
    public MaterialPrice(string connectionString) : base(connectionString){}

    /// <summary>
    /// Initializes a new MaterialPrice instance and adds it to the given container.
    /// This allows automated connection mananged by VS component designer:
    /// If container is disposed, it will also dispose this SAPClient instance,
    /// which will dispose a contained connection if needed.
    /// </summary>
    /// <param name="container"<The container where the new SAPClient instance is to be added.>/param<
    public MaterialPrice(System.ComponentModel.IContainer container) : base(container) {}    
  
	  /// <summary>
	  /// Remote Function Module ZKTB_DNET_INQUIRY.  
	  /// Check Material for DNET
	  /// </summary>
	  /// <param name="Flag">Single-character flag</param>
	  /// <param name="Main_Part">Structure for ZKTB_DNET_INQUIRY</param>
	  /// <param name="Substitution_Part">Structure for ZKTB_DNET_INQUIRY</param>
	  [RfcMethod(AbapName = "ZKTB_DNET_INQUIRY")]
	  [SoapDocumentMethodAttribute("http://tempuri.org/ZKTB_DNET_INQUIRY",
		   RequestNamespace = "urn:sap-com:document:sap:rfc:functions",
		   RequestElementName = "ZKTB_DNET_INQUIRY",
		   ResponseNamespace = "urn:sap-com:document:sap:rfc:functions",
		   ResponseElementName = "ZKTB_DNET_INQUIRY.Response")]
	  public virtual void ZKTB_DNET_INQUIRY (

		  [RfcParameter(AbapName = "FLAG",RfcType=RFCTYPE.RFCTYPE_CHAR, Optional = true, Direction = RFCINOUT.IN, Length = 1)]
		  [XmlElement("FLAG", IsNullable=false, Form=XmlSchemaForm.Unqualified)]
		  string Flag,
		  [RfcParameter(AbapName = "ORDER_ITEM_IN",RfcType=RFCTYPE.RFCTYPE_ITAB, Optional = false, Direction = RFCINOUT.INOUT)]
		  [XmlArray("ORDER_ITEM_IN", IsNullable=false, Form=XmlSchemaForm.Unqualified)]
		  [XmlArrayItem("item", IsNullable=false, Form=XmlSchemaForm.Unqualified)]
		  ref ZKTB_INQ_INTable Main_Part, /*ref ZSPST0028_01Table Main_Part, */
		  [RfcParameter(AbapName = "ORDER_ITEM_OUT",RfcType=RFCTYPE.RFCTYPE_ITAB, Optional = false, Direction = RFCINOUT.INOUT)]
		  [XmlArray("ORDER_ITEM_OUT", IsNullable=false, Form=XmlSchemaForm.Unqualified)]
		  [XmlArrayItem("item", IsNullable=false, Form=XmlSchemaForm.Unqualified)]
		  ref ZKTB_INQ_OUTTable Substitution_Part /*ref ZSPST0028_02Table Substitution_Part*/)
	  {
		  object[]results = null;
		  try
		  {
			  results = this.SAPInvoke("ZKTB_DNET_INQUIRY",new object[] {
																			Flag,Main_Part,Substitution_Part });
		  
			  Main_Part = (ZKTB_INQ_INTable /*ZSPST0028_01Table*/) results[0];
			  Substitution_Part = (ZKTB_INQ_OUTTable/* ZSPST0028_02Table*/) results[1];
		  }
		  catch(SAP.Connector.RfcException exRFCError)
		  {
				throw new Exception (" RFC Error" + exRFCError.Message);
		  }
	  }


  } 

}
