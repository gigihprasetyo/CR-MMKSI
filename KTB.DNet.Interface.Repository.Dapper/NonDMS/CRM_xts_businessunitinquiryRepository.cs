#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : CRM_xts_businessunitinquiry class
 SPECIAL NOTES : Generated from database BSIDMS_MMKSI_IF_ACC_DEV
 GENERATED BY  : Ivan
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 19 Jan 2021 08:40:54
 ===========================================================================
*/
#endregion

#region Namespace Imports
using Dapper;
using KTB.DNet.Interface.Domain;
using KTB.DNet.Interface.Framework;
using KTB.DNet.Interface.Repository.Dapper.NonDMS.SqlQuery.CRM_xts_businessunitinquiry;
using KTB.DNet.Interface.Repository.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
#endregion

namespace KTB.DNet.Interface.Repository.Dapper.NonDMS
{
    public class CRM_xts_businessunitinquiryRepository : BaseDNetRepository<CRM_xts_businessunitinquiry>, ICRM_xts_businessunitinquiryRepository<CRM_xts_businessunitinquiry, int>
    {
        #region Constructor
        public CRM_xts_businessunitinquiryRepository(string connectionString)
            : base(connectionString)
        { }
        #endregion

		
        #region Create CRM_xts_businessunitinquiry
        public ResponseMessage Create(CRM_xts_businessunitinquiry entity)
        {
			
            ResponseMessage responseMessage = new ResponseMessage() { Success = false };

            try
            {
                //SetCreatedLog(entity);
                ExecuteTransaction(Connection, (connection, transaction) =>
                {
                    return connection.Execute(CRM_xts_businessunitinquiryQuery.InsertCRM_xts_businessunitinquiry, entity, transaction);
                });

                responseMessage.Success = true;
                responseMessage.Status = ResponseStatus.Success;
                responseMessage.Message = string.Format("Businessunitinquiry {0} has been successfully created", entity.xts_businessunitinquiryid);
                responseMessage.Data = entity;
            }
            catch (Exception ex)
            {
                responseMessage.Status = ResponseStatus.Error;
                responseMessage.Message = "Failed to create Businessunitinquiry. " + GetInnerException(ex).Message;
            }

            return responseMessage;
			
        }
        #endregion
		
		
        public bool BulkInsert(List<CRM_xts_businessunitinquiry> data)
        {	
            bool result = false;
            try
            {
                DataTable dataTableData = new DataTable("CRM_xts_businessunitinquiry");
                dataTableData = data.ToDataTableForCreate();
                dataTableData = UpdateEmptyGuid(dataTableData);
                int batchSize = AppConfigs.GetInt(Constants.DBInsertBatchSizeConfigName);

                ExecuteTransaction(Connection, (connection, transaction) =>
                {
                    using (SqlBulkCopy insert = new SqlBulkCopy((SqlConnection)connection, SqlBulkCopyOptions.Default, (SqlTransaction)transaction))
                    {
                        if (batchSize > 0)
                        {
                            insert.BatchSize = batchSize;
                        }
                        insert.DestinationTableName = "CRM_xts_businessunitinquiry";

                        insert.WriteToServer(dataTableData);

                        result = true;
                        return true;
                    }
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		

        #region Update CRM_xts_businessunitinquiry
        public ResponseMessage Update(CRM_xts_businessunitinquiry entity)
        {
			
            ResponseMessage responseMessage = new ResponseMessage() { Success = false };

            try
            {
                if (entity != null)
                {
                    //SetLastModifiedLog(entity);
                    ExecuteTransaction(Connection, (connection, transaction) =>
                    {
                        return connection.Execute(CRM_xts_businessunitinquiryQuery.UpdateCRM_xts_businessunitinquiry, entity, transaction);
                    });

                    responseMessage.Success = true;
                    responseMessage.Status = ResponseStatus.Success;
                    responseMessage.Message = string.Format("Businessunitinquiry{0} has been successfully updated", entity.xts_businessunitinquiryid);
                    responseMessage.Data = entity;
                }
                else
                {
                    responseMessage.Status = ResponseStatus.Warning;
                    responseMessage.Message = "Businessunitinquiry does not exist";
                }
            }
            catch (Exception ex)
            {
                responseMessage.Status = ResponseStatus.Error;
                responseMessage.Message = "Failed to update Businessunitinquiry. " + GetInnerException(ex).Message;
            }

            return responseMessage;
			
        }
        #endregion
		

        #region Delete CRM_xts_businessunitinquiry
        public ResponseMessage Delete(int id)
        {
            return null;
        }
        #endregion

		#region Get CRM_xts_businessunitinquiry By Id
        public CRM_xts_businessunitinquiry Get(Guid xts_businessunitinquiryid)
        {
            try
            {
                using (var cn = Connection)
                {
                    return cn.Query<CRM_xts_businessunitinquiry>(
                        CRM_xts_businessunitinquiryQuery.GetCRM_xts_businessunitinquiryByID, new { xts_businessunitinquiryid = xts_businessunitinquiryid }
                        ).SingleOrDefault();
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public CRM_xts_businessunitinquiry Get(int id)
        {
            return null;
        }
        #endregion

        #region Get All CRM_xts_businessunitinquiry
        public List<CRM_xts_businessunitinquiry> GetAll()
        {
            return null;
        }
        #endregion

        #region Search CRM_xts_businessunitinquiry
        public List<CRM_xts_businessunitinquiry> Search(DataTablePostModel model, out int filteredResultsCount, out int totalResultsCount)
        {
            filteredResultsCount = 0;
            totalResultsCount = 0;
            return new List<CRM_xts_businessunitinquiry>();
        }
        #endregion

		#region Search CRM_xts_businessunitinquiry        
        public new List<CRM_xts_businessunitinquiry> Search(string strCriteria, string strInnerCriteria, string sortColumns, int page, int pageSize, out int filteredResultsCount, out int totalResultsCount)
        {
            try
            {
                string orderBy = sortColumns != string.Empty ? sortColumns.ToString() : null;
                filteredResultsCount = 0;

                List<CRM_xts_businessunitinquiry> result = SearchFetchPaging<CRM_xts_businessunitinquiry>((connection, query, sqlParams) =>
                {
                    return connection.Query<CRM_xts_businessunitinquiry>(query, sqlParams, null, true, Timeout, null).ToList();
                }, Connection, string.Format(CRM_xts_businessunitinquiryQuery.SelectQuery,
                                                strCriteria,
                                                strInnerCriteria)
                , "CRM_xts_businessunitinquiry.xts_businessunitinquiryid", null, orderBy, out filteredResultsCount, page, pageSize,
                string.Format(CRM_xts_businessunitinquiryQuery.GetTotalQuery,
                                                strCriteria,
                                                strInnerCriteria), "xts_businessunitinquiryid");

                totalResultsCount = filteredResultsCount;

                return result;

            }
            catch (Exception ex)
            {
                filteredResultsCount = 0;
                totalResultsCount = 0;
                return new List<CRM_xts_businessunitinquiry>();
            }
        }
        #endregion

        public void SetCreatedLog(CRM_xts_businessunitinquiry CRM_xts_businessunitinquiry)
        {
            CRM_xts_businessunitinquiry.createdbyname = UserLogin;
            CRM_xts_businessunitinquiry.createdon = DateTime.Now;
            CRM_xts_businessunitinquiry.RowStatus = 0;
            SetLastModifiedLog(CRM_xts_businessunitinquiry);
        }

        public void SetLastModifiedLog(CRM_xts_businessunitinquiry CRM_xts_businessunitinquiry)
        {
            CRM_xts_businessunitinquiry.modifiedbyname = UserLogin;
            CRM_xts_businessunitinquiry.modifiedon = DateTime.Now;
        }

		
        private DataTable UpdateEmptyGuid(DataTable dt)
        {
            foreach (DataColumn col in dt.Columns)
            {
                if (col.DataType.Name.ToString() == "Guid")
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        if (row[col.ColumnName].ToString() == Guid.Empty.ToString())
                        {
                            row[col.ColumnName] = DBNull.Value;
                        }
                    }
                }
            }
            return dt;
        }
		

    }
}
