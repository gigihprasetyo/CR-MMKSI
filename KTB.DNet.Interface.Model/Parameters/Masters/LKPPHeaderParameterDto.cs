#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : LKPPHeader class
 SPECIAL NOTES : Generated from database BSIDNET_MMKSI
 GENERATED BY  : Slamet
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 26 Agu 2021 09:55:25
 ===========================================================================
*/
#endregion

#region Namespace Imports
using System;
using Embarr.WebAPI.AntiXss;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using KTB.DNet.Interface.Resources;
#endregion

namespace KTB.DNet.Interface.Model
{
    public class LKPPHeaderParameterDto : ParameterDtoBase, IValidatableObject
    {
		public AttachmentParameterDto Attachment { get; set; }

		public short Classification { get; set; }

		[StringLength(10, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public string DealerCode { get; set; }

		[StringLength(500, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public string Description { get; set; }

		[StringLength(500, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public string GovInstName { get; set; }

		public int ID { get; set; }

		[DisplayFormat(DataFormatString = "ddMMyyyy")]
		public DateTime? LetterDate { get; set; }

		[StringLength(100, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public string Notes { get; set; }

		[StringLength(60, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public string ReferenceNumber { get; set; }

		public short Status { get; set; }

		public List<LKPPDetailParameterDto> LKPPDetails { get; set; }

		//public List<LKPPDealerParameterDto> LKPPDealers { get; set; }

		public System.Collections.Generic.IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var results = new List<ValidationResult>();
            return results;
        }
    }

    public class LKPPHeaderDeleteParameterDto
	{
        
		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public int ID { get; set; }
    }

    public class LKPPHeaderUpdateParameterDto : LKPPHeaderParameterDto
    {
		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public new int ID { get { return base.ID; } set { base.ID = value; } }
    }

	public class LKPPHeaderCreateParameterDto : LKPPHeaderParameterDto
    {
		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public new short Classification { get { return base.Classification; } set { base.Classification = value; } }

		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public new string ReferenceNumber { get { return base.ReferenceNumber; } set { base.ReferenceNumber = value; } }

		[DisplayFormat(DataFormatString = "ddMMyyyy")]
		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public new DateTime? LetterDate { get { return base.LetterDate; } set { base.LetterDate = value; } }

		[StringLength(500, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		[AntiXss]
		public new string GovInstName { get { return base.GovInstName; } set { base.GovInstName = value; } }

		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		[StringLength(10, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgLengthCannotExceed")]
		[AntiXss]
		public new string DealerCode { get { return base.DealerCode; } set { base.DealerCode = value; } }

		[Required(AllowEmptyStrings = false, ErrorMessageResourceType = typeof(MessageResource), ErrorMessageResourceName = "ErrorMsgDataRequired")]
		public new short Status { get { return base.Status; } set { base.Status = value; } }
	}

}
