#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : SparePartOutstandingOrder class
 SPECIAL NOTES : Generated from database BSIDNET_MMKSI_CR_Sparepart_BO 
 GENERATED BY  : Ako
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 13 Jan 2021 10:52:07
 ===========================================================================
*/
#endregion


#region Namespace Imports
using KTB.DNet.DataMapper.Framework;
//using KTB.DNet.Domain;
using KTB.DNet.Domain.Search;
using KTB.DNet.Interface.BusinessLogic.Interface;
using KTB.DNet.Interface.BusinessLogic.MapperBL;
using KTB.DNet.Interface.Repository.Interface;
using KTB.DNet.Interface.Model;
using KTB.DNet.Interface.Domain;
using KTB.DNet.Interface.Resources;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using KTB.DNet.Interface.Framework;
using AutoMapper;
using System.Reflection;
#endregion

namespace KTB.DNet.Interface.BusinessLogic
{
    public class SparePartOutstandingOrderBL : AbstractBusinessLogic, ISparePartOutstandingOrderBL
    {
        #region Variables
        private ISparePartOutstandingOrderRepository<SparePartOutstandingOrder, int> _SparePartOutstandingOrderRepo;
        #endregion

        #region Constructor
        public SparePartOutstandingOrderBL(ISparePartOutstandingOrderRepository<SparePartOutstandingOrder, int> SparePartOutstandingOrderRepo)
        {
            _SparePartOutstandingOrderRepo = SparePartOutstandingOrderRepo;
        }

        #endregion

        #region Public Methods
        /// <summary>
        /// Get SparePartOutstandingOrder by certain criteria
        /// </summary>
        /// <param name="filterDto"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public ResponseBase<List<SparePartOutstandingOrderDto>> Read(SparePartOutstandingOrderFilterDto filterDto, int pageSize)
        {            
            return null;
        }

		public ResponseBase<List<SparePartOutstandingOrderDto>> ReadList(SparePartOutstandingOrderFilterDto filterDto, int pageSize)
        {
			
            var result = new ResponseBase<List<SparePartOutstandingOrderDto>>();
            var sortColl = string.Empty;
            int totalRow = 0;
            int filteredTotalRow = 0;
            string rawSql = string.Empty;

            try
            {
                var innerQueryCriteria = string.Empty;
                var dc = DealerCode;
                var criterias = Helper.InitialStrCriteria(typeof(SparePartOutstandingOrder),filterDto);

                criterias = Helper.UpdateStrCriteria(typeof(SparePartOutstandingOrder), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "DealerCode", DealerCode,false,criterias);

                sortColl = Helper.UpdateSortColumnDapper(typeof(SparePartOutstandingOrder), filterDto);

                List<SparePartOutstandingOrder> data = _SparePartOutstandingOrderRepo.Search(
                                    criterias, innerQueryCriteria, sortColl, filterDto.pages, pageSize, out filteredTotalRow, out totalRow);

                if (data != null && data.Count > 0)
                {
                    SparePartOutstandingOrder x = new SparePartOutstandingOrder();
                    result.lst = data.ConvertList<SparePartOutstandingOrder, SparePartOutstandingOrderDto>();
                    result.total = filteredTotalRow;
                }
                else
                {
                    ErrorMsgHelper.DataNotFound(result.messages, typeof(SparePartOutstandingOrder), filterDto);
                }

                result.success = true;

            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlExceptionRead(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }
            return result;
			
        }

        /// <summary>
        /// Create a new SparePartOutstandingOrder
        /// </summary>
        /// <param name="objCreate"></param>
        /// <returns></returns>
        public ResponseBase<SparePartOutstandingOrderDto> Create(SparePartOutstandingOrderParameterDto objCreate)
        {
            return null;
        }

		
		
        /// <summary>
        /// Update SparePartOutstandingOrder
        /// </summary>
        /// <param name="objUpdate"></param>
        /// <returns></returns>
        public ResponseBase<SparePartOutstandingOrderDto> Update(SparePartOutstandingOrderParameterDto paramUpdate)
        {
            return null;
        }

		
        /// <summary>
        /// Delete SparePartOutstandingOrder by its id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ResponseBase<SparePartOutstandingOrderDto> Delete(int ID)
        {
            return null;
        }

		#endregion

		
    }
}
