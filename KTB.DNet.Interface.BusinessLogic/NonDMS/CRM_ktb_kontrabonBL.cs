#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : CRM_ktb_kontrabon class
 SPECIAL NOTES : Generated from database BSIDMS_MMKSI_IF_ACC_DEV 
 GENERATED BY  : Fika (version : v.1.08)
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 02 Sep 2020 14:43:44
 ===========================================================================
*/
#endregion


#region Namespace Imports
using KTB.DNet.DataMapper.Framework;
using KTB.DNet.Domain;
using KTB.DNet.Domain.Search;
using KTB.DNet.Interface.BusinessLogic.Interface;
using KTB.DNet.Interface.BusinessLogic.MapperBL;
using KTB.DNet.Interface.Repository.Interface;
using KTB.DNet.Interface.Model;
using KTB.DNet.Interface.Domain;
using KTB.DNet.Interface.Resources;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using KTB.DNet.Interface.Framework;
using AutoMapper;
using System.Reflection;
#endregion

namespace KTB.DNet.Interface.BusinessLogic
{
    public class CRM_ktb_kontrabonBL : AbstractBusinessLogic, ICRM_ktb_kontrabonBL
    {
        #region Variables
        private ICRM_ktb_kontrabonRepository<CRM_ktb_kontrabon, int> _CRM_ktb_kontrabonRepo;
        #endregion

        #region Constructor
        public CRM_ktb_kontrabonBL(ICRM_ktb_kontrabonRepository<CRM_ktb_kontrabon, int> CRM_ktb_kontrabonRepo)
        {
            _CRM_ktb_kontrabonRepo = CRM_ktb_kontrabonRepo;
        }

        #endregion

        #region Public Methods
        /// <summary>
        /// Get CRM_ktb_kontrabon by certain criteria
        /// </summary>
        /// <param name="filterDto"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public ResponseBase<List<CRM_ktb_kontrabonDto>> Read(CRM_ktb_kontrabonFilterDto filterDto, int pageSize)
        {
            return null;
        }

        public ResponseBase<List<CRM_ktb_kontrabonDto>> ReadList(CRM_ktb_kontrabonFilterDto filterDto, int pageSize)
        {

            var result = new ResponseBase<List<CRM_ktb_kontrabonDto>>();
            var sortColl = string.Empty;
            int totalRow = 0;
            int filteredTotalRow = 0;
            string rawSql = string.Empty;

            try
            {
                var innerQueryCriteria = string.Empty;
                var dc = DealerCode;
                var criterias = Helper.InitialStrCriteria(typeof(CRM_ktb_kontrabon), filterDto);

                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "DealerCode", DealerCode, false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "SourceType", "NON DMS", false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "RowStatus", "0", false, criterias);

                sortColl = Helper.UpdateSortColumnDapper(typeof(CRM_ktb_kontrabon), filterDto, "CRM_ktb_kontrabon");

                List<CRM_ktb_kontrabon> data = _CRM_ktb_kontrabonRepo.Search(
                                    criterias, innerQueryCriteria, sortColl, filterDto.pages, pageSize, out filteredTotalRow, out totalRow);

                if (data != null && data.Count > 0)
                {
                    CRM_ktb_kontrabon x = new CRM_ktb_kontrabon();
                    result.lst = data.ConvertList<CRM_ktb_kontrabon, CRM_ktb_kontrabonDto>();
                    result.total = filteredTotalRow;
                }
                else
                {
                    ErrorMsgHelper.DataNotFound(result.messages, typeof(CRM_ktb_kontrabon), filterDto);
                }

                result.success = true;

            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlExceptionRead(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }
            return result;

        }

        /// <summary>
        /// Create a new CRM_ktb_kontrabon
        /// </summary>
        /// <param name="objCreate"></param>
        /// <returns></returns>
        public ResponseBase<CRM_ktb_kontrabonDto> Create(CRM_ktb_kontrabonParameterDto objCreate)
        {
            return null;
        }


        public ResponseBaseCustom<CRM_ktb_kontrabonDto> Create(CRM_ktb_kontrabonCreateParameterDto paramCreate)
        {
            var result = new ResponseBaseCustom<CRM_ktb_kontrabonDto>();
            var sortColl = string.Empty;
            int totalRow = 0;
            int filteredTotalRow = 0;
            string rawSql = string.Empty;
            var innerQueryCriteria = string.Empty;
            var page = 1;
            var size = 20;
            var validationResults = new List<DNetValidationResult>();

            try
            {
                PropertyInfo[] properties = typeof(CRM_ktb_kontrabonCreateParameterDto).GetProperties();
                foreach (PropertyInfo property in properties)
                {
                    if (property.PropertyType.FullName.Contains("DateTime"))
                    {
                        if (property.GetValue(paramCreate) != null && (property.GetValue(paramCreate).ToString() == "01/01/0001 0:00:00" || property.GetValue(paramCreate).ToString() == "01/01/1753 0:00:00"))
                        {
                            property.SetValue(paramCreate, null);
                        }

                        if (property.GetValue(paramCreate) != null && property.GetValue(paramCreate).ToString() != "01/01/0001 0:00:00")
                        {
                            DateTime datetimeUTCzero = Convert.ToDateTime(property.GetValue(paramCreate)).AddHours(-7);
                            property.SetValue(paramCreate, datetimeUTCzero);
                        }
                    }
                }

                CRM_ktb_kontrabon createRow = paramCreate.ConvertObject<CRM_ktb_kontrabon>();
                Guid newId = Guid.NewGuid();
                createRow.ktb_kontrabonid = newId;
                createRow.DealerCode = DealerCode;
                createRow.SourceType = "NON DMS"; createRow.createdby = (createRow.createdby == null || createRow.createdby.ToString() == "00000000-0000-0000-0000-000000000000") ? createRow.modifiedby : createRow.createdby;
                createRow.RowStatus = "0"; createRow.statecode = 0;

                //Add Validation Data Input
                ValidationParameterDto paramCheck = new ValidationParameterDto();
                paramCheck.dealerCode = DealerCode;
                paramCheck.xts_businessunitid = paramCreate.ktb_businessunitid;
                paramCheck.ktb_vendorid = paramCreate.ktb_vendorid;
                paramCheck.ownerid = paramCreate.ownerid;

                if (!ValidationHelper.ValidateDataInput(paramCheck, validationResults))
                {
                    ValidationDapper dapper = new ValidationDapper();
                    List<MessageBase> errMsg = dapper.messageList(validationResults);
                    result.messages = errMsg;
                }
                else
                {
                    var nResult = _CRM_ktb_kontrabonRepo.Create(createRow);
                    if (nResult.Success == true)
                    {
                        result.success = true;
                        result._idGuid = newId;
                        result.total = 1;
                    }
                    else
                    {
                        ErrorMsgHelper.ErrorMsgDBSave(result.messages);
                    }
                }
            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }



        public ResponseBase<List<CRM_ktb_kontrabonDto>> BulkCreate(List<CRM_ktb_kontrabonCreateParameterDto> lstObjCreate)
        {
            var result = new ResponseBase<List<CRM_ktb_kontrabonDto>>();
            var listOfExistingData = new List<CRM_ktb_kontrabonDto>();
            var validationResults = new List<DNetValidationResult>();

            try
            {
                // insert into db
                var CRM_ktb_kontrabonList = lstObjCreate.ConvertList<CRM_ktb_kontrabonCreateParameterDto, CRM_ktb_kontrabon>();
                foreach (var item in CRM_ktb_kontrabonList.Select((value, index) => new { value, index }))
                {
                    PropertyInfo[] properties = typeof(CRM_ktb_kontrabon).GetProperties();
                    foreach (PropertyInfo property in properties)
                    {
                        if (property.PropertyType.FullName.Contains("DateTime"))
                        {
                            if (property.GetValue(item.value) != null && (property.GetValue(item.value).ToString() == "01/01/0001 0:00:00" || property.GetValue(item.value).ToString() == "01/01/1753 0:00:00"))
                            {
                                property.SetValue(item.value, null);
                            }

                            if (property.GetValue(item.value) != null && property.GetValue(item.value).ToString() != "01/01/0001 0:00:00")
                            {
                                DateTime datetimeUTCzero = Convert.ToDateTime(property.GetValue(item.value)).AddHours(-7);
                                property.SetValue(item.value, datetimeUTCzero);
                            }
                        }
                    }

                    Guid newId = Guid.NewGuid();
                    item.value.ktb_kontrabonid = newId;
                    item.value.DealerCode = DealerCode;
                    item.value.SourceType = "NON DMS"; item.value.createdby = (item.value.createdby == null || item.value.createdby.ToString() == "00000000-0000-0000-0000-000000000000") ? item.value.modifiedby : item.value.createdby;
                    item.value.RowStatus = "0"; 
                    item.value.statecode = item.value.statecode == null ? 0 : item.value.statecode;

                    //Add Validation Data Input
                    ValidationParameterDto paramCheck = new ValidationParameterDto();
                    paramCheck.dealerCode = DealerCode;
                    paramCheck.xts_businessunitid = item.value.ktb_businessunitid;
                    paramCheck.ktb_vendorid = item.value.ktb_vendorid;
                    paramCheck.ownerid = item.value.ownerid;

                    if (ValidationHelper.ValidateDataInput(paramCheck, validationResults, item.index, true))
                    {
                        //_CRM_ktb_kontrabonRepo.SetCreatedLog(item.value);
                    }
                }

                if (validationResults.Any())
                {
                    return PopulateValidationError<List<CRM_ktb_kontrabonDto>>(validationResults.Distinct().ToList(), null);
                }
                else
                {
                    var isSuccess = _CRM_ktb_kontrabonRepo.BulkInsert(CRM_ktb_kontrabonList);
                    result.success = isSuccess;
                    if (result.success)
                        result.total = CRM_ktb_kontrabonList.Count;
                    result.lst = CRM_ktb_kontrabonList.ConvertList<CRM_ktb_kontrabon, CRM_ktb_kontrabonDto>();
                }
            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }


        /// <summary>
        /// Update CRM_ktb_kontrabon
        /// </summary>
        /// <param name="objUpdate"></param>
        /// <returns></returns>
        public ResponseBase<CRM_ktb_kontrabonDto> Update(CRM_ktb_kontrabonParameterDto paramUpdate)
        {
            return null;
        }


        public ResponseBaseCustom<CRM_ktb_kontrabonDto> Update(CRM_ktb_kontrabonUpdateParameterDto paramUpdate)
        {
            var result = new ResponseBaseCustom<CRM_ktb_kontrabonDto>();
            var sortColl = string.Empty;
            int totalRow = 0;
            int filteredTotalRow = 0;
            string rawSql = string.Empty;
            var innerQueryCriteria = string.Empty;
            var page = 1;
            var size = 20;
            var validationResults = new List<DNetValidationResult>();

            try
            {
                var criterias = "";
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "DealerCode", DealerCode, false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "SourceType", "NON DMS", false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "RowStatus", "0", false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "ktb_kontrabonid", paramUpdate.ktb_kontrabonid.ToString(), false, criterias);
                List<CRM_ktb_kontrabon> data = _CRM_ktb_kontrabonRepo.Search(
                                    criterias, innerQueryCriteria, sortColl, page, size, out filteredTotalRow, out totalRow);

                if (data != null && data.Count > 0)
                {
                    PropertyInfo[] properties = typeof(CRM_ktb_kontrabonUpdateParameterDto).GetProperties();
                    foreach (PropertyInfo property in properties)
                    {
                        if (property.PropertyType.FullName.Contains("DateTime"))
                        {
                            if (property.GetValue(paramUpdate) != null && (property.GetValue(paramUpdate).ToString() == "01/01/0001 0:00:00" || property.GetValue(paramUpdate).ToString() == "01/01/1753 0:00:00"))
                            {
                                property.SetValue(paramUpdate, null);
                            }

                            if (property.GetValue(paramUpdate) != null && property.GetValue(paramUpdate).ToString() != "01/01/0001 0:00:00")
                            {
                                DateTime datetimeUTCzero = Convert.ToDateTime(property.GetValue(paramUpdate)).AddHours(-7);
                                property.SetValue(paramUpdate, datetimeUTCzero);
                            }
                        }
                    }

                    //Add Validation Data Input
                    ValidationParameterDto paramCheck = new ValidationParameterDto();
                    paramCheck.dealerCode = DealerCode;
                    paramCheck.xts_businessunitid = paramUpdate.ktb_businessunitid;
                    paramCheck.ktb_vendorid = paramUpdate.ktb_vendorid;
                    paramCheck.ownerid = paramUpdate.ownerid;

                    if (!ValidationHelper.ValidateDataInput(paramCheck, validationResults))
                    {
                        ValidationDapper dapper = new ValidationDapper();
                        List<MessageBase> errMsg = dapper.messageList(validationResults);
                        result.messages = errMsg;
                    }
                    else
                    {
                        CRM_ktb_kontrabon updateRow = paramUpdate.ConvertObject<CRM_ktb_kontrabon>();
                        updateRow.DealerCode = DealerCode;
                        updateRow.SourceType = "NON DMS";
                        updateRow.RowStatus = string.IsNullOrEmpty(updateRow.RowStatus) ? "0" : updateRow.RowStatus;

                        var nResult = _CRM_ktb_kontrabonRepo.Update(updateRow);
                        if (nResult.Success == true)
                        {
                            result.success = true;
                            result._idGuid = nResult.Data.ConvertObject<CRM_ktb_kontrabon>().ktb_kontrabonid;
                            result.total = 1;
                        }
                        else
                        {
                            ErrorMsgHelper.ErrorMsgDBSave(result.messages);
                        }
                    }
                }
                else
                {
                    ErrorMsgHelper.UpdateNotAvailable(result.messages);
                }
            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }


        /// <summary>
        /// Delete CRM_ktb_kontrabon by its id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ResponseBase<CRM_ktb_kontrabonDto> Delete(int ID)
        {
            return null;
        }


        public ResponseBaseCustom<CRM_ktb_kontrabonDto> Delete(CRM_ktb_kontrabonDeleteParameterDto paramDelete)
        {
            var result = new ResponseBaseCustom<CRM_ktb_kontrabonDto>();
            var sortColl = string.Empty;
            int totalRow = 0;
            int filteredTotalRow = 0;
            string rawSql = string.Empty;
            var innerQueryCriteria = string.Empty;
            var page = 1;
            var size = 20;
            try
            {
                var criterias = "";
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "DealerCode", DealerCode, false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "SourceType", "NON DMS", false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "RowStatus", "0", false, criterias);
                criterias = Helper.UpdateStrCriteria(typeof(CRM_ktb_kontrabon), new MatchTypeFilter { SqlOperation = SQLOperation.And }, MatchType.Exact.GetHashCode(), "ktb_kontrabonid", paramDelete.ktb_kontrabonid.ToString(), false, criterias);

                List<CRM_ktb_kontrabon> data = _CRM_ktb_kontrabonRepo.Search(
                                    criterias, innerQueryCriteria, sortColl, page, size, out filteredTotalRow, out totalRow);
                if (data != null && data.Count > 0)
                {
                    CRM_ktb_kontrabon deleteRow = data[0];
                    deleteRow.RowStatus = "-1"; deleteRow.modifiedby = paramDelete.modifiedby; deleteRow.modifiedon = Convert.ToDateTime(paramDelete.modifiedon).AddHours(-7);
                    var nResult = _CRM_ktb_kontrabonRepo.Update(deleteRow);
                    if (nResult.Success == true)
                    {
                        result.success = true;
                        result._idGuid = nResult.Data.ConvertObject<CRM_ktb_kontrabon>().ktb_kontrabonid;
                        result.total = 1;
                    }
                    else
                    {
                        ErrorMsgHelper.ErrorMsgDBSave(result.messages);
                    }
                }
                else
                {
                    ErrorMsgHelper.DeleteNotAvailable(result.messages);
                }
            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }

        #endregion

        #region Private Methods

        #endregion
    }
}
