#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : VWI_IPAddressRestrictionBL class
 GENERATED BY  : Admin
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 11 Okt 2021
 ===========================================================================
*/
#endregion

#region Namespace Imports
using KTB.DNet.DataMapper.Framework;
using KTB.DNet.Domain;
using KTB.DNet.Domain.Search;
using KTB.DNet.Interface.BusinessLogic.Interface;
using KTB.DNet.Interface.BusinessLogic.MapperBL;
using KTB.DNet.Interface.Repository.Interface;
using KTB.DNet.Interface.Model;
using KTB.DNet.Interface.Domain;
using KTB.DNet.Interface.Resources;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using KTB.DNet.Interface.Framework;
using KTB.DNet.Interface.Repository.Dapper.DNet;
#endregion

namespace KTB.DNet.Interface.BusinessLogic
{
    public class VWI_IPAddressRestrictionBL : AbstractBusinessLogic, IVWI_IPAddressRestrictionBL
    {
        #region Variables
        private IVWI_IPAddressRestrictionRepository<VWI_IPAddressRestriction_IF, int> _VWI_IPAddressRestrictionRepo;
        private IVWI_UsernameRestrictionRepository<VWI_UserNameRestriction_IF, int> _VWI_UsernameRestrictionRepo;
        #endregion

        #region Constructor
        public VWI_IPAddressRestrictionBL(IVWI_IPAddressRestrictionRepository<VWI_IPAddressRestriction_IF, int> VWI_IPAddressRestrictionRepo, IVWI_UsernameRestrictionRepository<VWI_UserNameRestriction_IF, int> VWI_UsernameRestrictionRepo)
        {
            _VWI_IPAddressRestrictionRepo = VWI_IPAddressRestrictionRepo;
            _VWI_UsernameRestrictionRepo = VWI_UsernameRestrictionRepo;
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get VWI_IPAddressRestriction by certain criteria
        /// </summary>
        /// <param name="filterDto"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public ResponseBase<List<VWI_IPAddressRestrictionDto>> Read(VWI_IPAddressRestrictionFilterDto filterDto, int pageSize)
        {
            return null;
        }

        public ResponseBase<List<VWI_IPAddressRestrictionDto>> ReadList(VWI_IPAddressRestrictionFilterDto filterDto)
        {
            bool IsAllow = true;
            bool IsAllowByIP = true;
            bool IsAllowByUserName = true;
            var result = new ResponseBase<List<VWI_IPAddressRestrictionDto>>();
            var validationResults = new List<DNetValidationResult>();
            VWI_IPAddressRestrictionDto rst = new VWI_IPAddressRestrictionDto();

            try
            {
                if (!string.IsNullOrEmpty(filterDto.IP_Address))
                {
                    IsAllowByIP = ValidateByIPAddress(filterDto.IP_Address, validationResults);
                }
                if (!string.IsNullOrEmpty(filterDto.UserName))
                {
                    IsAllowByUserName = ValidateByUserName(filterDto.UserName, validationResults);
                }

                if (string.IsNullOrEmpty(filterDto.IP_Address) && string.IsNullOrEmpty(filterDto.IP_Address))
                {
                    validationResults.Add(new DNetValidationResult(string.Format(MessageResource.ErrorMsgDataRequired, "IP_Address atau Username")));
                    IsAllow = false;
                }

                if (IsAllowByIP && IsAllowByUserName)
                    IsAllow = true;
                else if (!IsAllowByIP && !IsAllowByUserName)
                    IsAllow = false;
                else if (IsAllowByIP != IsAllowByUserName)
                    IsAllow = false;

                List<VWI_IPAddressRestrictionDto> rtn = new List<VWI_IPAddressRestrictionDto>();
                rst.IsAllow = IsAllow;
                rtn.Add(rst);
                result.lst = rtn;

                if (validationResults.Count > 0)
                {
                    ValidationDapper dapper = new ValidationDapper();
                    List<MessageBase> errMsg = dapper.messageList(validationResults);
                    result.messages = errMsg;
                }
                else
                {
                    result.success = true;
                    result.total = 1;
                }

            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlExceptionRead(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }

        #endregion

        #region private method
        private bool ValidateByIPAddress(string IPAddress, List<DNetValidationResult> validationResults)
        {
            bool Results = false;
            var result = new ResponseBase<List<VWI_IPAddressRestrictionDto>>();
            bool isNumber = IPAddress.Replace(".", "").All(char.IsDigit);
            string[] ipSplit = IPAddress.Split('.');
            if (ipSplit.Length == 4 && isNumber)
            {
                VWI_IPAddressRestriction_IF data = _VWI_IPAddressRestrictionRepo.Search(IPAddress);
                List<VWI_IPAddressRestriction_IF> rstlst = new List<VWI_IPAddressRestriction_IF>();
                rstlst.Add(data);

                if (data != null)
                {
                    if (!data.IsAllow)
                    {
                        validationResults.Add(new DNetValidationResult(string.Format("{0}{1} tidak diizinkan", "IP_Address : ", IPAddress)));
                        Results = false;
                    }
                    else
                    {
                        Results = data.IsAllow;
                    }
                }
                else
                {
                    validationResults.Add(new DNetValidationResult(string.Format(MessageResource.ErrorMessageDataNotFoundWithColumn, "IP_Address", IPAddress)));
                    Results = false;
                }
            }
            else if (ipSplit.Length != 4 || !IPAddress.Contains('.') || !isNumber)
            {
                validationResults.Add(new DNetValidationResult(string.Format(MessageResource.ErrorMsgDataValueInvalid, "IP_Address : ", IPAddress)));
                Results = false;
            }

            return Results;
        }

        private bool ValidateByUserName(string Username, List<DNetValidationResult> validationResults)
        {
            bool Results = false;
            var result = new ResponseBase<List<VWI_UsernameRestrictionDto>>();

            VWI_UserNameRestriction_IF data = _VWI_UsernameRestrictionRepo.Search(Username);
            if (data != null)
            {
                if (!data.IsAllow)
                {
                    validationResults.Add(new DNetValidationResult(string.Format("{0}{1} tidak diizinkan", "Username : ", Username)));
                    Results = false;
                }
                else
                {
                    Results = data.IsAllow;
                }
            }
            else
            {
                validationResults.Add(new DNetValidationResult(string.Format(MessageResource.ErrorMessageDataNotFoundWithColumn, "Username", Username)));
                Results = false;
            }

            return Results;
        }
        #endregion
    }
}
