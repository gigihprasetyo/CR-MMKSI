#region Summary
/*
 ===========================================================================
 AUTHOR        : BSI Code Generator Interface 
 PURPOSE       : LKPPHeader class
 SPECIAL NOTES : Generated from database BSIDNET_MMKSI 
 GENERATED BY  : Slamet
 ---------------------
 Copyright  (c) 2020 
 ---------------------
 $History      : $
 Created on 26 Agu 2021 09:55:25
 ===========================================================================
*/
#endregion


#region Namespace Imports
using KTB.DNet.DataMapper.Framework;
using KTB.DNet.Domain;
using KTB.DNet.Domain.Search;
using KTB.DNet.Interface.BusinessLogic.Interface;
using KTB.DNet.Interface.BusinessLogic.MapperBL;
using KTB.DNet.Interface.Repository.Interface;
using KTB.DNet.Interface.Model;
using KTB.DNet.Interface.Domain;
using System.Runtime.ExceptionServices;
using KTB.DNet.Interface.Resources;
using System;
using System.IO;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using KTB.DNet.Interface.Framework;
using System.Reflection;
using System.Runtime.InteropServices;

#endregion

namespace KTB.DNet.Interface.BusinessLogic
{
    public class LKPPBL : AbstractBusinessLogic, ILKPPBL
    {
        #region Variables
        
        private readonly IMapper _lkppheaderMapper;
        private readonly IMapper _lkppdetailMapper;
        private readonly IMapper _lkppdealerMapper;
        private readonly AutoMapper.IMapper _mapper;
        private readonly IMapper _vechileTypeMapper;
        private StandardCodeBL _enumBL;
        private TransactionManager _transactionManager;
        public static int MimeSampleSize = 256;
        public static string DefaultMimeType = "application/octet-stream";


        #endregion

        #region Constructor

        public LKPPBL()
        {
            _lkppheaderMapper = MapperFactory.GetInstance().GetMapper(typeof(LKPPHeader).ToString());
            _lkppdetailMapper = MapperFactory.GetInstance().GetMapper(typeof(LKPPDetail).ToString());
            _lkppdealerMapper = MapperFactory.GetInstance().GetMapper(typeof(LKPPDealer).ToString());
            _vechileTypeMapper = MapperFactory.GetInstance().GetMapper(typeof(VechileType).ToString());
            _mapper = AutoMapperConfig.InitializeAutoMapper().CreateMapper();
            _enumBL = new StandardCodeBL(_mapper);
            _transactionManager = new TransactionManager();
            _transactionManager.Insert += new TransactionManager.OnInsertEventHandler(InsertWithTransactionManagerHandler);
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get LKPPHeader by certain criteria
        /// </summary>
        /// <param name="filterDto"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public ResponseBase<List<LKPPHeaderDto>> Read(LKPPHeaderFilterDto filterDto, int pageSize)
        {
            // default filter to get the Active Row Status only
            var criterias = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
            criterias.opAnd(new Criteria(typeof(LKPPHeader), "Dealer.DealerCode", MatchType.Exact, DealerCode));
            var result = new ResponseBase<List<LKPPHeaderDto>>();
            var sortColl = new SortCollection();
            var totalRow = 0;

            try
            {
                // populate the criterias
                criterias = Helper.UpdateCriteria(typeof(LKPPHeader), filterDto, criterias);

                // populate the sort info
                sortColl = Helper.UpdateSortColumn(typeof(LKPPHeader), filterDto, sortColl);

                // get data
                var data = _lkppheaderMapper.RetrieveByCriteria(criterias, sortColl, filterDto.pages, pageSize, ref totalRow);
                if (data.Count > 0)
                {
                    var list = data.Cast<LKPPHeader>().ToList();
                    var listData = list.Select(item => _mapper.Map<LKPPHeaderDto>(item)).ToList();

                    result.lst = listData;
                    result.total = totalRow;
                }
                else
                {
                    ErrorMsgHelper.DataNotFound(result.messages, typeof(LKPPHeader), filterDto);
                }

                result.success = true;

            }
            catch (SqlException ex)
            {
                ErrorMsgHelper.SqlExceptionRead(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }

        public ResponseBase<LKPPHeaderDto> Create(LKPPHeaderParameterDto objCreate)
        {
            return null;
        }
        /// <summary>
        /// Create a new LKPPHeader
        /// </summary>
        /// <param name="objCreate"></param>
        /// <returns></returns>
        public ResponseBase<LKPPHeaderDto> Create(LKPPHeaderCreateParameterDto objCreate)
        {
            #region Initialize
            var result = new ResponseBase<LKPPHeaderDto>();
            byte[] fileBytes = null;
            string filePath = string.Empty;
            var validationResults = new List<DNetValidationResult>();
            LKPPHeader lkppHeader = new LKPPHeader();
            List<LKPPDetail> lkppDetails = new List<LKPPDetail>();
            LKPPDealer lkppDealer = new LKPPDealer();
            var isValid = true;
            var attachment = new AttachmentParameterDto();
            attachment.FileName = objCreate.Attachment.FileName;
            attachment.Base64OfStream = objCreate.Attachment.Base64OfStream;
            #endregion

            try
            {
                ValidateLKPPHeader(objCreate, validationResults, out lkppHeader, 0, false);
                if (objCreate.LKPPDetails != null && objCreate.LKPPDetails.Count != 0)
                {
                    ValidateLKPPDetails(objCreate, validationResults, lkppDetails); 
                }
                else
                { 
                    validationResults.Add(new DNetValidationResult("Tidak ada data Detail")); 
                }

                if(!string.IsNullOrEmpty(objCreate.DealerCode))
                {
                    ValidateLKPPDealers(objCreate, validationResults, lkppDealer, lkppHeader);
                }
                else
                {
                    validationResults.Add(new DNetValidationResult("Tidak ada data Dealer"));
                }

                ValidateAttachment(attachment, validationResults, false, 0);
                isValid = validationResults.Count == 0;

                if (isValid)
                {
                    fileBytes = Convert.FromBase64String(attachment.Base64OfStream);
                       
                    // save the file
                    string uploadErrorMessage = FileUtility.SaveIdentityFileCustom(attachment, DealerCode, fileBytes, "LKPP", out filePath);
                    if (!string.IsNullOrEmpty(uploadErrorMessage))
                    {
                        validationResults.Add(new DNetValidationResult(uploadErrorMessage));
                    }
 
                    // return if any errors found
                    if (validationResults.Any())
                    {
                        return PopulateValidationError<LKPPHeaderDto>(validationResults, null);
                    }
                    else
                    {
                        lkppHeader.Attachment = filePath;
                        var createdObject = InsertWithTransactionManager(lkppHeader, lkppDetails, lkppDealer);
                        if (createdObject != null)
                        {
                            var obj = (LKPPHeader)_lkppheaderMapper.Retrieve(createdObject.ID);

                            if (obj != null)
                            {
                                result._id = createdObject.ID;
                                result.success = true;
                                result.total = 1;
                                result.lst = _mapper.Map<LKPPHeaderDto>(obj);
                            }
                        }
                        else
                        {
                            //if any error delete new file in repository
                            DeleteFileInRepository(objCreate.Attachment.FileName);
;                           ErrorMsgHelper.ErrorMsgDBSaveContactAdmin(result.messages);
                        }
                    }
                }
                else
                {
                    return PopulateValidationError<LKPPHeaderDto>(validationResults, null);
                }

            }
            catch (SqlException ex)
            {
                
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                DeleteFileInRepository(objCreate.Attachment.FileName);
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }

        public ResponseBase<LKPPHeaderDto> Update(LKPPHeaderParameterDto objUpdate)
        {
            return null;
        }

        /// <summary>
        /// Update LKPPHeader
        /// </summary>
        /// <param name="objUpdate"></param>
        /// <returns></returns>
        public ResponseBase<LKPPHeaderDto> Update(LKPPHeaderUpdateParameterDto objUpdate)
        {
            #region Initialize
            var result = new ResponseBase<LKPPHeaderDto>();
            byte[] fileBytes = null;
            string filePath = string.Empty;
            var validationResults = new List<DNetValidationResult>();
            var isValid = true;
            LKPPHeader lkppHeader;
            List<LKPPDetail> lkppDetails = new List<LKPPDetail>();
            LKPPDealer lkppDealer = new LKPPDealer();
            var attachment = new AttachmentParameterDto();
            attachment.FileName = objUpdate.Attachment.FileName;
            attachment.Base64OfStream = objUpdate.Attachment.Base64OfStream;
            string fileAttachmentNameOnDB = objUpdate.Attachment.FileName;
            #endregion

            try
            {  
                LKPPHeader lkpppOnDB = (LKPPHeader)_lkppheaderMapper.Retrieve(objUpdate.ID);
                if (lkpppOnDB == null)
                {
                    validationResults.Add(new DNetValidationResult(MessageResource.ErrorMsgDataUpdateNotAvailable));
                    return PopulateValidationError<LKPPHeaderDto>(validationResults, null);
                }
                else { fileAttachmentNameOnDB = lkpppOnDB.Attachment; }

                ValidateLKPPHeader(objUpdate, validationResults, out lkppHeader, lkpppOnDB.Status, true);
                if (objUpdate.LKPPDetails != null && objUpdate.LKPPDetails.Count != 0)
                {
                    ValidateLKPPDetails(objUpdate, validationResults, lkppDetails);
                }
                else
                {
                    validationResults.Add(new DNetValidationResult("Tidak ada data Detail"));
                }

                //can not update LKPPdealer in update
                if (!string.IsNullOrEmpty(objUpdate.DealerCode))
                {
                    ValidateLKPPDealers(objUpdate, validationResults, lkppDealer, lkppHeader);
                }
                else
                {
                    validationResults.Add(new DNetValidationResult("Tidak ada data Dealer"));
                }

                ValidateAttachment(attachment, validationResults, true, objUpdate.ID);
                isValid = validationResults.Count == 0;

                if (isValid)
                {
                    fileBytes = Convert.FromBase64String(attachment.Base64OfStream);
                    // save the file
                    string uploadErrorMessage = FileUtility.SaveIdentityFileCustom(attachment, DealerCode, fileBytes, "LKPP", out filePath);
                    if (!string.IsNullOrEmpty(uploadErrorMessage))
                    {
                        validationResults.Add(new DNetValidationResult(uploadErrorMessage));
                    }
                    
                    // return if any errors found
                    if (validationResults.Any())
                    {
                        return PopulateValidationError<LKPPHeaderDto>(validationResults, null);
                    }
                    else
                    {
                        // update a LKPP Header
                        var updatedObject = UpdateWithTransactionManager(lkpppOnDB, lkppHeader, lkppDetails, lkppDealer);
                        if (updatedObject != null)
                        {
                            var obj = (LKPPHeader)_lkppheaderMapper.Retrieve(updatedObject.ID);

                            if (obj != null)
                            {
                                result._id = updatedObject.ID;
                                result.success = true;
                                result.total = 1;
                                result.lst = _mapper.Map<LKPPHeaderDto>(obj);
                                
                                //delete old file if any update file name
                                if (attachment.FileName != lkpppOnDB.Attachment)
                                {
                                    DeleteFileInRepository(lkpppOnDB.Attachment);
                                }
                            }
                        }
                        else
                        {
                            //if any error delete new file in repository
                            DeleteFileInRepository(objUpdate.Attachment.FileName);
                            ErrorMsgHelper.ErrorMsgDBSaveContactAdmin(result.messages);
                        }
                    }
                }
                else
                {
                    return PopulateValidationError<LKPPHeaderDto>(validationResults, null);
                }
            }
            catch (SqlException ex)
            {
                if (objUpdate.Attachment.FileName != fileAttachmentNameOnDB)
                {
                    DeleteFileInRepository(objUpdate.Attachment.FileName);
                }
                ErrorMsgHelper.SqlException(result.messages, ex.Message);
            }
            catch (Exception ex)
            {
                if (objUpdate.Attachment.FileName != fileAttachmentNameOnDB)
                {
                    DeleteFileInRepository(objUpdate.Attachment.FileName);
                }
                ErrorMsgHelper.Exception(result.messages, ex.Message);
            }

            return result;
        }

        /// <summary>
        /// Delete TrTrainee by its id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ResponseBase<LKPPHeaderDto> Delete(int id)
        {
            return null;
        }


        #endregion

        #region Private Methods

        private bool ValidateLKPPHeader(LKPPHeaderParameterDto objCreateUpdate, List<DNetValidationResult> validationResults, out LKPPHeader lkppHeader, int currentStatusinDB = 0, bool isUpdate = false)
        {
            bool isValid = true;
            lkppHeader = _mapper.Map<LKPPHeader>(objCreateUpdate);
            lkppHeader.Notes = ""; //only APM can fill this column, not from APM (confirm : Halimi)

            var criteriasLKPPHeader = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
            criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ReferenceNumber", MatchType.Exact, objCreateUpdate.ReferenceNumber));
            if (isUpdate)//check referencenumber in another row if update
            {
                criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ID", MatchType.No, objCreateUpdate.ID));
            }
            var LKPPHeaders = _lkppheaderMapper.RetrieveByCriteria(criteriasLKPPHeader);
            if (LKPPHeaders.Count > 0)
            {
                isValid = false;
                validationResults.Add(new DNetValidationResult(string.Format(MessageResource.ErrorMsgDataIsExist, FieldResource.LKPPReference)));
            }

            if (isUpdate)
            {
                if (currentStatusinDB == 0)
                {   //status baru hanya boleh menjadi validasi dari dealer side
                    if (objCreateUpdate.Status != 1 && objCreateUpdate.Status != 0)
                    {
                        isValid = false;
                        validationResults.Add(new DNetValidationResult("Status Baru hanya bisa diupdate menjadi validasi"));
                    }
                }
                else if (currentStatusinDB == 1 ) //only can update status from validate (1) to batal validate (4)
                {
                    if (objCreateUpdate.Status == 4)
                    {
                        lkppHeader.Status = 0;//if batal tolak (4) change status to baru (0)
                    }
                    else
                    {
                        isValid = false;
                        validationResults.Add(new DNetValidationResult("Status LKPP bukan Validasi, tidak diperbolehkan update status menjadi Batal Validasi"));
                    }
                }
                else 
                {
                    isValid = false;
                    validationResults.Add(new DNetValidationResult("Data dengan status selain Baru tidak boleh dilakukan perubahan"));
                }

            }
            else
            {
                if (objCreateUpdate.Status !=0)
                {
                    isValid = false;
                    validationResults.Add(new DNetValidationResult("Status LKPP harus baru (0)"));
                }
            }

            return isValid;

        }

        //private bool IsChangeNoReference(LKPPHeaderParameterDto model)
        //{
        //    var criteriasLKPPHeader = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
        //    criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ID", MatchType.Exact, model.ID));

        //    var LKPPHeaders = _lkppheaderMapper.RetrieveByCriteria(criteriasLKPPHeader);
        //    if (LKPPHeaders.Count > 0)
        //    {
        //        var LKPPHeader = (LKPPHeaders[0] as LKPPHeader);
        //        if (LKPPHeader.ReferenceNumber.Trim() != model.ReferenceNumber)
        //        {
        //            return true;
        //        }
        //    }

        //    return false;
        //}

        //private bool ValidateStatusValidation(LKPPHeaderParameterDto model)
        //{
        //    var criteriasLKPPHeader = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
        //    criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ReferenceNumber", MatchType.Exact, model.ReferenceNumber));

        //    var LKPPHeaders = _lkppheaderMapper.RetrieveByCriteria(criteriasLKPPHeader);
        //    if (LKPPHeaders.Count > 0)
        //    {
        //        var LKPPHeader = (LKPPHeaders[0] as LKPPHeader);
        //        if (LKPPHeader.Status == 1) //1 as validation by dealer
        //        {
        //            return true;
        //        }
        //    }
        //    return false;
        //}

        //private bool IsLKPPHeaderExist(LKPPHeaderParameterDto model)
        //{
        //    var criteriasLKPPHeader = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
        //    criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ReferenceNumber", MatchType.Exact, model.ReferenceNumber));

        //    var LKPPHeaders = _lkppheaderMapper.RetrieveByCriteria(criteriasLKPPHeader);
        //    if (LKPPHeaders.Count > 0)
        //    {
        //        return true;
        //    }
        //    return false;
        //}

        private bool ValidateLKPPDetails(LKPPHeaderParameterDto objCreateUpdate, List<DNetValidationResult> validationResults, List<LKPPDetail> lkppDetails)
        {
            bool isValid = true;
            
            foreach (LKPPDetailParameterDto item in objCreateUpdate.LKPPDetails)
            {
                LKPPDetail lkppDetail = _mapper.Map<LKPPDetail>(item);
                lkppDetail.UnitRemain = item.Unit; //unit remain always update of create same with unit parameter

                // Validate Vehicle Type
                var vechiletype = _vechileTypeMapper.RetrieveByCriteria(Helper.GenerateCriteria(typeof(VechileType), "RowStatus", "VechileTypeCode", (short)DBRowStatus.Active, item.VehicleTypeCode));
                if (vechiletype.Count > 0)
                {
                    VechileType vechileTypeLKPP = vechiletype[0] as VechileType;
                    lkppDetail.VechileType = vechileTypeLKPP;
                }
                else
                {
                    validationResults.Add(new DNetValidationResult("Vehicle Type Code " + item.VehicleTypeCode.ToString() + " tidak ditemukan"));
                }

                //check if detail exist in Database(only for Update) with different ID Detail
                    if (objCreateUpdate.ID != 0)
                    {
                        var criteriasLKPPDetail = new CriteriaComposite(new Criteria(typeof(LKPPDetail), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
                        criteriasLKPPDetail.opAnd(new Criteria(typeof(LKPPDetail), "VechileType.VechileTypeCode", MatchType.Exact, item.VehicleTypeCode));
                        criteriasLKPPDetail.opAnd(new Criteria(typeof(LKPPDetail), "LKPPHeader.ID", MatchType.Exact, objCreateUpdate.ID));
                        criteriasLKPPDetail.opAnd(new Criteria(typeof(LKPPDetail), "ID", MatchType.No, item.ID));

                    var LKPPDetails = _lkppdetailMapper.RetrieveByCriteria(criteriasLKPPDetail);
                        if (LKPPDetails.Count > 0)
                        {
                            isValid = false;
                            validationResults.Add(new DNetValidationResult(string.Format("Data Tipe Kendaraan " + item.VehicleTypeCode + " sudah ada dengan ID bukan " + item.ID)));
                        }
                    }

                //check if detail exist in parameters
                var lst = objCreateUpdate.LKPPDetails.Where(x => x.VehicleTypeCode.ToString().Trim() == item.VehicleTypeCode.ToString().Trim());
                if (lst.Count() > 1)
                {
                    String errorMessage = string.Format(string.Format(MessageResource.ErrorMsgDuplicateData) + string.Format(" ({0},{1})", "Vehicle Type = " + item.VehicleTypeCode.ToString(), "LKPP Reference Number = " + objCreateUpdate.ReferenceNumber));
                    bool isErrorExist = validationResults.Any(q => q.ErrorMessage == errorMessage);
                    if (isErrorExist == false)
                    {
                        isValid = false;
                        validationResults.Add(new DNetValidationResult(errorMessage));
                    }
                }

                //check unit qty
                if (item.Unit <= 0)
                {
                    isValid = false;
                    validationResults.Add(new DNetValidationResult("Unit pada Reference Number = " + objCreateUpdate.ReferenceNumber+ " harus lebih dari 0"));
                }

                lkppDetails.Add(lkppDetail);
            }
            
            return isValid;
        }

        private bool ValidateLKPPDealers(LKPPHeaderParameterDto objCreateUpdate, List<DNetValidationResult> validationResults, LKPPDealer lkppDealers, LKPPHeader lKPPHeader)
        {
            bool isValid = true;
            KTB.DNet.Domain.Dealer dealer = null;
            if (ValidationHelper.ValidateDealer(objCreateUpdate.DealerCode, validationResults, this.DealerCode, ref dealer))
            {
                lkppDealers.Dealer = dealer;
                lKPPHeader.Dealer = dealer;
            }
            else
            {
                isValid = false;
            }

            return isValid;
        }

        private bool ValidateAttachment(AttachmentParameterDto objAttachment, List<DNetValidationResult> validationResults, bool isUpdate, int LKPPHeaderID)
        {
            bool isValid = true;
            if (objAttachment == null)
            {
                isValid = false;
                validationResults.Add(new DNetValidationResult(ErrorCode.DataRequiredField, string.Format(MessageResource.ErrorMsgDataRequired, FieldResource.IdentityFile)));
            }
            else
            {
                //validate extension file name
                var ext = Path.GetExtension(objAttachment.FileName);
                if (ext.ToLower() != ".zip" && ext.ToLower() != ".pdf")
                {
                    isValid = false;
                    validationResults.Add(new DNetValidationResult("Filename attachment harus berekstensi pdf atau zip"));
                }

                //validate extension file bytes
                byte[] fileBytes = Convert.FromBase64String(objAttachment.Base64OfStream);
                if (fileBytes == null)
                {
                    validationResults.Add(new DNetValidationResult("Error read bytes data"));
                }
                else
                {
                    String mimeExtension = MimeTypeFrom(fileBytes, "text/plain");
                    if (!mimeExtension.Contains("pdf") && !mimeExtension.Contains("zip"))
                    {
                        validationResults.Add(new DNetValidationResult("Attachment file harus berekstensi .pdf atau .zip"));
                    }
                }

                //cek maksmum file size 10MB
                if (fileBytes.Length > 1024000)
                {
                    validationResults.Add(new DNetValidationResult(ErrorCode.DataTypeOrDataFormatInvalid, string.Format(ValidationResource.MaximumFileSize, "LKPP Attachment", 1024000)));
                }
                
                //name can't same with existing name in database
                var criteriasLKPPHeader = new CriteriaComposite(new Criteria(typeof(LKPPHeader), "RowStatus", MatchType.Exact, (short)DBRowStatus.Active));
                criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "Attachment", MatchType.Exact, objAttachment.FileName));
                if (isUpdate)//check attachment name in another row if update
                {
                    criteriasLKPPHeader.opAnd(new Criteria(typeof(LKPPHeader), "ID", MatchType.No, LKPPHeaderID));
                }
                var LKPPHeaders = _lkppheaderMapper.RetrieveByCriteria(criteriasLKPPHeader);
                if (LKPPHeaders.Count > 0)
                {
                    isValid = false;
                    validationResults.Add(new DNetValidationResult("Nama file attachment :"+objAttachment.FileName + " sudah ada di database, filename harus diganti"));
                }
            }
            return isValid;
        }


        /// <summary>
        /// Insert spk with transaction manager
        /// </summary>
        /// <param name="spk"></param>
        /// <returns></returns>
        private LKPPHeader InsertWithTransactionManager(LKPPHeader lkppheader, List<LKPPDetail> lkppdetails, LKPPDealer lkppdealer)
        {
            LKPPHeader result = null;
            if (this.IsTaskFree())
            {
                try
                {
                    this.SetTaskLocking();

                    // insert lkpp header
                    this._transactionManager.AddInsert(lkppheader, DNetUserName);
                   
                    if (lkppdetails != null)
                    {
                        // insert lkpp detail
                        foreach (LKPPDetail lkppdetail in lkppdetails)
                        {
                            lkppdetail.LKPPHeader = lkppheader;
                            this._transactionManager.AddInsert(lkppdetail, DNetUserName);
                        }
                    }

                    if (lkppdealer != null)
                    {
                        // insert lkpp dealer
                        lkppdealer.LKPPHeader = lkppheader;
                        this._transactionManager.AddInsert(lkppdealer, DNetUserName);
                    }

                    this._transactionManager.PerformTransaction();
                    result = lkppheader;
                }
                catch (SqlException sqlException)
                {
                    ExceptionDispatchInfo.Capture(sqlException).Throw();
                }
                catch (Exception ex)
                {
                    ExceptionDispatchInfo.Capture(ex).Throw();
                }
                finally
                {
                    this.RemoveTaskLocking();
                }
            }

            return result;
        }

        private LKPPHeader UpdateWithTransactionManager(LKPPHeader lkpppOnDB, LKPPHeader lkppheader, List<LKPPDetail> lkppdetails, LKPPDealer lkppdealer)
        {
            LKPPHeader result = null;
            lkppheader.MarkLoaded();
            if (this.IsTaskFree())
            {
                try
                {
                    this.SetTaskLocking();

                    // update lkpp header
                    lkppheader.CreatedBy = lkpppOnDB.CreatedBy; 
                    this._transactionManager.AddUpdate(lkppheader, DNetUserName);
                    List<LKPPDetail> detailMustDelete = new List<LKPPDetail>();
                    
                    //check if any delete detail data in DB
                    foreach (LKPPDetail detailOnDB in lkpppOnDB.LKPPDetails)
                    {
                        if (detailOnDB.RowStatus == 0)
                        {
                            bool isExist = lkppdetails.Any(item => item.ID == detailOnDB.ID);
                            if (!isExist)
                            {
                                detailOnDB.RowStatus = -1;
                                detailOnDB.LKPPHeader = lkppheader;
                                this._transactionManager.AddUpdate(detailOnDB, DNetUserName);
                            }
                        }
                    }

                    if (lkppdetails != null)
                    {
                        // insert or update lkpp detail
                        foreach (LKPPDetail lkppdetail in lkppdetails)
                        {
                            lkppdetail.LKPPHeader = lkppheader;
                            if (lkppdetail.ID != 0)
                            {
                                lkppdetail.CreatedBy = lkpppOnDB.CreatedBy;
                                this._transactionManager.AddUpdate(lkppdetail, DNetUserName);
                            }
                            else
                            {
                                this._transactionManager.AddInsert(lkppdetail, DNetUserName);
                            }
                        }

                    }

                    //LKPP Dealet can not updated
                    /*
                    //check if any delete dealer data in DB
                    foreach (LKPPDealer dealerOnDB in lkpppOnDB.LKPPDealers)
                    {
                        if (dealerOnDB.RowStatus == 0)
                        {
                            bool isExist = lkppdealers.Any(item => item.ID == dealerOnDB.ID);
                            if (!isExist)
                            {
                                dealerOnDB.RowStatus = -1;
                                dealerOnDB.LKPPHeader = lkppheader;
                                this._transactionManager.AddUpdate(dealerOnDB, DNetUserName);
                            }
                        }
                    }

                    if (lkppdealers != null)
                    {
                        // insert or update lkpp dealer
                        foreach (LKPPDealer lkppdealer in lkppdealers)
                        {
                            lkppdealer.LKPPHeader = lkppheader;
                            
                            if (lkppdealer.ID != 0)
                            {
                                lkppdealer.CreatedBy = lkpppOnDB.CreatedBy;
                                this._transactionManager.AddUpdate(lkppdealer, DNetUserName);
                            }
                            else
                            {
                                this._transactionManager.AddInsert(lkppdealer, DNetUserName);
                            }
                        }
                    }
                    */
                    this._transactionManager.PerformTransaction();
                    result = lkppheader;
                }
                catch (SqlException sqlException)
                {
                    ExceptionDispatchInfo.Capture(sqlException).Throw();
                }
                catch (Exception ex)
                {
                    ExceptionDispatchInfo.Capture(ex).Throw();
                }
                finally
                {
                    this.RemoveTaskLocking();
                }
            }

            return result;
        }

        /// <summary>
        /// Trans manager handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private void InsertWithTransactionManagerHandler(object sender, TransactionManager.OnInsertArgs args)
        {
            // set the object ID from db returned id
            if (args.DomainObject.GetType() == typeof(LKPPHeader))
            {
                ((LKPPHeader)args.DomainObject).ID = args.ID;
                ((LKPPHeader)args.DomainObject).MarkLoaded();
            }
            else if (args.DomainObject.GetType() == typeof(LKPPDetail))
            {
                ((LKPPDetail)args.DomainObject).ID = args.ID;
                ((LKPPDetail)args.DomainObject).MarkLoaded();
            }
            else if (args.DomainObject.GetType() == typeof(LKPPDealer))
            {
                ((LKPPDealer)args.DomainObject).ID = args.ID;
                ((LKPPDealer)args.DomainObject).MarkLoaded();
            }
        }

        private void DeleteFileInRepository(String fileName)
        {
            //if any error delete new file in repository
            String destFolder = Path.Combine(AppConfigs.GetString("SAPFolder"), @"LKPP\");
            string fileSavedPath = Path.Combine(destFolder, fileName);
            try
            {
                FileUtility.DeleteEvidenceFile(fileSavedPath);
            }
            catch { }
        }

        //Get Extensin from Byte, sample in Pinvoke.net 
        [DllImport("urlmon.dll", CharSet = CharSet.Unicode, ExactSpelling = true, SetLastError = false)]
        private static extern int FindMimeFromData(
            IntPtr pBC,
            [MarshalAs(UnmanagedType.LPWStr)] string pwzUrl,
            [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.I1, SizeParamIndex=3)]
            byte[] pBuffer,
            int cbSize,
            [MarshalAs(UnmanagedType.LPWStr)] string pwzMimeProposed,
            int dwMimeFlags,
            out IntPtr ppwzMimeOut,
            int dwReserved);

        public string MimeTypeFrom(byte[] dataBytes, string mimeProposed)
        {
            if (dataBytes == null)
                throw new ArgumentNullException("dataBytes");
            string mimeRet = String.Empty;
            IntPtr suggestPtr = IntPtr.Zero, filePtr = IntPtr.Zero, outPtr = IntPtr.Zero;
            if (mimeProposed != null && mimeProposed.Length > 0)
            {
                //suggestPtr = Marshal.StringToCoTaskMemUni(mimeProposed); // for your experiments ;-)
                mimeRet = mimeProposed;
            }
            int ret = FindMimeFromData(IntPtr.Zero, null, dataBytes, dataBytes.Length, mimeProposed, 0, out outPtr, 0);
            if (ret == 0 && outPtr != IntPtr.Zero)
            {
                mimeRet = Marshal.PtrToStringUni(outPtr);
                Marshal.FreeCoTaskMem(outPtr); //msdn docs wrongly states that operator 'delete' must be used. Do not remove FreeCoTaskMem
                return mimeRet;

            }
            return mimeRet;
        }

        #endregion

    }
}
